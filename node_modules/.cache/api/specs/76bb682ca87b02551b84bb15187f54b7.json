{
  "components": {
    "requestBodies": {
      "CreateChargeRequest": {
        "description": "Charges a credit card or other payment source using the data in the provided `charge` object.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "integer",
                  "format": "int64",
                  "minimum": 0,
                  "description": "Charge amount in cents. If the charge request includes tax (`tax_rate_uuid` or `tax_amount`), this value must be the sum of any item prices and any tax or tip. For example, if the item cost = $10 and the tax is $1, the amount is 1100 cents ($11). Format: Cents"
                },
                "currency": {
                  "type": "string",
                  "description": "[Three-letter ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html). Format: Lower case. Length: Max 3"
                },
                "capture": {
                  "type": "boolean",
                  "description": "Indicates if the charge is to be captured immediately. Values: True - Default. False - Indicates the charge transaction type is AUTH (or PRE-AUTH), and the charge can be captured later using the /v1/charges/{id}/capture endpoint."
                },
                "partial_redemption": {
                  "type": "boolean",
                  "description": "Indicates if the charge can be authorized for a lesser amount.  Values: True False - Default"
                },
                "description": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Text describing the charge. This information is often displayed to users."
                },
                "ecomind": {
                  "type": "string",
                  "description": "Indicates who entered the card data used for a charge - customer (ecom) or merchant (moto).",
                  "default": "ecom",
                  "enum": [
                    "ecom",
                    "moto"
                  ]
                },
                "external_reference_id": {
                  "type": "string",
                  "description": "Identifier (ID), such as an invoice or purchase order (PO) number, that is passed to the merchant's gateway and displayed in settlement records. Format: supported for US - Spaces in between are allowed Length: Max 12, including spaces and alphanumeric characters"
                },
                "receipt_email": {
                  "type": "string",
                  "description": "Email address to the charge reciept is sent. receipt is sent only after the charge is paid. Note - Receipts are not sent in the sandbox environment."
                },
                "soft_descriptor": {
                  "description": "Soft descriptor information for a transaction. This information displays on the customer's card statement in place of the merchant's business information on record.\n",
                  "properties": {
                    "dba_name": {
                      "type": "string",
                      "maxLength": 38,
                      "description": "Merchant doing business as (DBA) name, product, or service. \nLength: Max 38 alphanumeric characters\n"
                    },
                    "street": {
                      "type": "string",
                      "description": "Merchant's street address."
                    },
                    "city": {
                      "type": "string",
                      "description": "Merchant's city."
                    },
                    "region": {
                      "type": "string",
                      "maxLength": 2,
                      "description": "Merchant's state. Format: as a two-character postal abbreviation (US only).\n"
                    },
                    "postal_code": {
                      "type": "string",
                      "description": "Merchant's postal code."
                    },
                    "country_code": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 3,
                      "description": "Merchant's country code.\nFormat: 3-digit code; see the [Country code reference](https://docs.clover.com/docs/country-code-reference).\n"
                    },
                    "merchant_contact_info": {
                      "type": "string",
                      "description": "Merchant's phone number or email address. Format: Max 13 characters for Discover and Visa transactions."
                    }
                  }
                },
                "source": {
                  "type": "string",
                  "description": "Payment source to charge, such as `token` or `alternate_tender`."
                },
                "stored_credentials": {
                  "description": "Stored credentials for a transaction. For subsequent payments with a saved card, stored credentials are available only with multi-pay (mTokens) tokens. [See Saving a card for future transactions](https://docs.clover.com/docs/ecommerce-saving-card) for more information.",
                  "properties": {
                    "sequence": {
                      "enum": [
                        "FIRST",
                        "SUBSEQUENT"
                      ],
                      "type": "string",
                      "description": "Indicates sequence of the transaction for the same payment card.\n Values:\n First\n Subsequent - Mastercard only supports Subsequent"
                    },
                    "is_scheduled": {
                      "type": "boolean",
                      "description": "Indicates if the transaction is scheduled or part of an installment.\n Values:\n True - Transaction is scheduled.\n False - Transaction is part of an installment. Installments are only available in the US."
                    },
                    "initiator": {
                      "enum": [
                        "MERCHANT",
                        "CARDHOLDER"
                      ],
                      "type": "string",
                      "description": "Indicates with whose consent the transaction is initiated.\n Values:\n Cardholder\n Merchant"
                    },
                    "installment_info": {
                      "description": "Installment information for the transaction.",
                      "properties": {
                        "bill_pay_indicator": {
                          "enum": [
                            "Recurring",
                            "Installment"
                          ],
                          "type": "string",
                          "description": "Indicates if the transaction is a recurring or installment payment. \n Values:\n Installment\n Recurring - For Canadian merchants, the value must be Recurring."
                        },
                        "invoice_number": {
                          "type": "string",
                          "description": "Invoice number of the installment or recurring transaction."
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the installment or recurring transaction."
                        }
                      }
                    }
                  }
                },
                "level2": {
                  "description": "Additional data for purchase card transactions (US only).",
                  "properties": {
                    "tax_amount": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Part of the transaction amount that indicates the sales tax. A pc_order_number is required when including a `tax_amount`."
                    },
                    "tax_indicator": {
                      "type": "integer",
                      "description": "Taxable status of the transaction. Values: 0 – No tax information provided 1 – Tax amount is provided 2 – Purchase item is tax exempt or non-taxable",
                      "enum": [
                        0,
                        1,
                        2
                      ]
                    },
                    "purchase_identifier": {
                      "type": "string",
                      "description": "Identifier, such as stock keeping unit (SKU), code or reference number that the merchant or customer uses to identify the purchase."
                    },
                    "pc_order_number": {
                      "type": "string",
                      "description": "Order number or customer reference number reported as part of the purchase card data."
                    },
                    "discount_amount": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Discount amount for the transaction. Format: Cents"
                    },
                    "freight_amount": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Freight amount included for the transaction. Format: Cents"
                    },
                    "duty_amount": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Duty amount included for the transaction. Format: Cents"
                    },
                    "destination_postal_code": {
                      "type": "string",
                      "description": "Postal or ZIP code of the delivery location."
                    },
                    "ship_from_postal_code": {
                      "type": "string",
                      "description": "Postal or ZIP code of the shipping location."
                    },
                    "destination_country_code": {
                      "type": "integer",
                      "description": "Delivery location country code.\nFormat: 3-digit code; see the [Country code reference](https://docs.clover.com/docs/country-code-reference)."
                    },
                    "merchant_tax_id": {
                      "type": "string",
                      "description": "Only for Mastercard. Identifier (ID) for the tax collected by the merchant for the transaction."
                    },
                    "product_description": {
                      "type": "string",
                      "description": "Description of the purchased item."
                    }
                  }
                },
                "level3": {
                  "description": "Additional data for purchase card level3 transactions (US only). Supported for Mastercard and Visa only. Purchase card level2 is mandatory for level3 transactions.",
                  "properties": {
                    "service_code": {
                      "type": "string",
                      "maxLength": 3,
                      "description": "Required for all non-keyed transactions and swiped transactions. Service code extracted from the track data."
                    },
                    "magnetic_Stripe_Ind": {
                      "type": "boolean",
                      "description": "Value of true indicates a magnetic stripe swiped transaction.\n Values:\n True\n False"
                    },
                    "level3_line_items": {
                      "description": "List of level3 line items.",
                      "items": {
                        "description": "List of level3 line items.",
                        "properties": {
                          "item_description": {
                            "type": "string",
                            "maxLength": 35,
                            "description": "Merchandise description; required for reduced interchange.\n Required for Mastercard.\n Format:\n For Mastercard, level 3 must not be all 0s (zeros) or all high/low values.\n For Visa, level 3 must not be all spaces or all 0s (zeros).\n Length: Max 35 characters"
                          },
                          "product_code": {
                            "type": "string",
                            "maxLength": 12,
                            "description": "Required for Mastercard and Visa. Product or Universal Product Code (UPC). Format: Must not be all spaces"
                          },
                          "unit_cost": {
                            "type": "integer",
                            "format": "int64",
                            "maxLength": 13,
                            "description": "Unit cost of level3 line item. Format: For Visa must not be all spaces or 0s (zeros)"
                          },
                          "quantity": {
                            "type": "number",
                            "format": "decimal",
                            "description": "Item quantity information; required for reduced interchange.\nFormat: Must not be all spaces or 0s (zeros); Last 4 digits are considered decimal places, example: 20.0000"
                          },
                          "discount_amount": {
                            "type": "integer",
                            "format": "int64",
                            "maxLength": 13,
                            "description": "Discount amount applied to the level3 line item.\nFormat: For Visa level2 must not be all 0s (zeros), if a discount exists"
                          },
                          "unit_of_measure": {
                            "type": "string",
                            "maxLength": 12,
                            "description": "Unit of measurement codes used for international trade. Required for reduced interchange for both Mastercard and Visa. See [Unit of Measurement codes](https://docs.clover.com/docs/units-of-measurement-codes)."
                          },
                          "commodity_code": {
                            "type": "string",
                            "maxLength": 12,
                            "description": "Indicates classification of purchased items. Required for Visa."
                          }
                        },
                        "required": [
                          "item_description",
                          "quantity",
                          "unit_of_measure",
                          "product_code",
                          "unit_cost"
                        ]
                      },
                      "type": "array"
                    }
                  }
                },
                "tax_rate_uuid": {
                  "type": "string",
                  "minimum": 0,
                  "description": "Tax rate universally unique identifiers (UUID). Use the [Get all tax rates endpoint](https://docs.clover.com/reference/taxrategettaxrates) to retrieve merchant tax UUID information. The tax is not automatically added to the total amount. Your app must ensure the Amount property is the total final amount to charge the customer.    "
                },
                "tax_amount": {
                  "type": "integer",
                  "format": "int64",
                  "minimum": 0,
                  "description": "Amount paid in taxes. This value is not automatically added to the total amount. Your app must ensure the Amount property is the total final amount to charge the customer."
                },
                "tip_amount": {
                  "type": "integer",
                  "format": "int64",
                  "minimum": 0,
                  "description": "Amount paid in tips. This value is automatically added to the total amount when the transaction is finalized."
                },
                "tender": {
                  "description": "Custom tender to charge or pay for the order, for example: cash or check.",
                  "properties": {
                    "label_key": {
                      "enum": [
                        "com.clover.tender.cash",
                        "com.clover.tender.check"
                      ],
                      "type": "string",
                      "description": "Cash and check system tenders."
                    },
                    "label": {
                      "type": "string",
                      "description": "Name of the custom merchant tender."
                    },
                    "id": {
                      "type": "string",
                      "description": "Universally unique identifier (UUID) of the custom merchant tender."
                    }
                  }
                }
              },
              "required": [
                "amount",
                "currency",
                "source"
              ]
            }
          }
        }
      },
      "CreateRefundRequest": {
        "description": "An object describing a refund to be applied",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "charge": {
                  "type": "string",
                  "description": "Unique ID of the charge to refund"
                },
                "amount": {
                  "type": "integer",
                  "format": "int64",
                  "minimum": 1,
                  "description": "Refund amount in cents. You can only refund the remaining, unrefunded amount of the charge."
                },
                "external_reference_id": {
                  "type": "string",
                  "description": "An ID, such as an invoice or PO number, that is passed to the merchant's gateway and ultimately appears in settlement records. Format supported for US, spaces in between are allowed and including spaces length max to be 12 including alphanumeric characters."
                },
                "reason": {
                  "type": "string",
                  "description": "User-selected explanation for the refund",
                  "enum": [
                    "duplicate",
                    "fraudulent",
                    "requested_by_customer"
                  ]
                }
              }
            }
          }
        }
      },
      "CreateCustomerRequest": {
        "description": "An object describing a new customer account for the merchant",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ecomind": {
                  "type": "string",
                  "description": "Indicates whether the card data used for a charge was entered by the customer (`ecom`) or merchant (`moto`).",
                  "default": "ecom",
                  "enum": [
                    "ecom",
                    "moto"
                  ]
                },
                "email": {
                  "type": "string",
                  "description": "Customer email address"
                },
                "firstName": {
                  "type": "string",
                  "description": "First (given) name of the customer"
                },
                "lastName": {
                  "type": "string",
                  "description": "Last name (surname) of the customer"
                },
                "name": {
                  "type": "string",
                  "description": "Full name of the customer"
                },
                "source": {
                  "type": "string",
                  "description": "The tokenized card (cToken) which is saved as a card on file for future transactions"
                },
                "phone": {
                  "type": "string",
                  "description": "Phone number of the customer"
                },
                "shipping": {
                  "anyOf": [
                    {
                      "properties": {
                        "address": {
                          "properties": {
                            "city": {
                              "description": "The city, district, suburb, town, or village",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "country": {
                              "description": "Two-letter country code",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "line1": {
                              "description": "First line of the address (includes the street address, PO box, or company name)",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "line2": {
                              "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "postal_code": {
                              "description": "ZIP or postal code",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "state": {
                              "description": "The state, county, province, or region",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "title": "Address",
                          "type": "object",
                          "x-expandableFields": []
                        },
                        "carrier": {
                          "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
                          "maxLength": 5000,
                          "nullable": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "Product recipient's name",
                          "maxLength": 5000,
                          "nullable": true,
                          "type": "string"
                        },
                        "phone": {
                          "description": "Product recipient's phone (including extension)",
                          "maxLength": 5000,
                          "nullable": true,
                          "type": "string"
                        },
                        "tracking_number": {
                          "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
                          "maxLength": 5000,
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "address"
                      ],
                      "title": "Shipping",
                      "type": "object",
                      "x-expandableFields": [
                        "address"
                      ]
                    }
                  ],
                  "description": "Shipping information for the customer",
                  "nullable": true
                }
              },
              "required": [
                "email",
                "source"
              ]
            }
          }
        }
      },
      "CaptureChargeRequest": {
        "description": "Used to capture the full or partial amount of the specified charge",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "integer",
                  "format": "int64",
                  "minimum": 1,
                  "description": "Charge amount in the smallest monetary unit of the merchant's currency. If you do not specify an amount, the total of the original charge is captured."
                },
                "receipt_email": {
                  "type": "string",
                  "description": "Email address which receives the charge receipt. This value overrides any previously-specified email address for the charge. Receipts are not sent in sandbox."
                },
                "level2": {
                  "description": "Additional data for purchase card transactions (US only).",
                  "properties": {
                    "tax_amount": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Part of the transaction amount that indicates the sales tax. A pc_order_number is required when including a `tax_amount`."
                    },
                    "tax_indicator": {
                      "type": "integer",
                      "description": "Taxable status of the transaction. Values: 0 – No tax information provided 1 – Tax amount is provided 2 – Purchase item is tax exempt or non-taxable",
                      "enum": [
                        0,
                        1,
                        2
                      ]
                    },
                    "purchase_identifier": {
                      "type": "string",
                      "description": "Identifier, such as stock keeping unit (SKU), code or reference number that the merchant or customer uses to identify the purchase."
                    },
                    "pc_order_number": {
                      "type": "string",
                      "description": "Order number or customer reference number reported as part of the purchase card data."
                    },
                    "discount_amount": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Discount amount for the transaction. Format: Cents"
                    },
                    "freight_amount": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Freight amount included for the transaction. Format: Cents"
                    },
                    "duty_amount": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Duty amount included for the transaction. Format: Cents"
                    },
                    "destination_postal_code": {
                      "type": "string",
                      "description": "Postal or ZIP code of the delivery location."
                    },
                    "ship_from_postal_code": {
                      "type": "string",
                      "description": "Postal or ZIP code of the shipping location."
                    },
                    "destination_country_code": {
                      "type": "integer",
                      "description": "Delivery location country code.\nFormat: 3-digit code; see the [Country code reference](https://docs.clover.com/docs/country-code-reference)."
                    },
                    "merchant_tax_id": {
                      "type": "string",
                      "description": "Only for Mastercard. Identifier (ID) for the tax collected by the merchant for the transaction."
                    },
                    "product_description": {
                      "type": "string",
                      "description": "Description of the purchased item."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "tender": {
        "description": "Custom tender to charge or pay for the order, for example: cash or check.",
        "properties": {
          "label_key": {
            "enum": [
              "com.clover.tender.cash",
              "com.clover.tender.check"
            ],
            "type": "string",
            "description": "Cash and check system tenders."
          },
          "label": {
            "type": "string",
            "description": "Name of the custom merchant tender."
          },
          "id": {
            "type": "string",
            "description": "Universally unique identifier (UUID) of the custom merchant tender."
          }
        }
      },
      "installment_info": {
        "description": "Installment information for the transaction.",
        "properties": {
          "bill_pay_indicator": {
            "enum": [
              "Recurring",
              "Installment"
            ],
            "type": "string",
            "description": "Indicates if the transaction is a recurring or installment payment. \n Values:\n Installment\n Recurring - For Canadian merchants, the value must be Recurring."
          },
          "invoice_number": {
            "type": "string",
            "description": "Invoice number of the installment or recurring transaction."
          },
          "description": {
            "type": "string",
            "description": "Description of the installment or recurring transaction."
          }
        }
      },
      "stored_credentials": {
        "description": "Stored credentials for a transaction. For subsequent payments with a saved card, stored credentials are available only with multi-pay (mTokens) tokens. [See Saving a card for future transactions](https://docs.clover.com/docs/ecommerce-saving-card) for more information.",
        "properties": {
          "sequence": {
            "enum": [
              "FIRST",
              "SUBSEQUENT"
            ],
            "type": "string",
            "description": "Indicates sequence of the transaction for the same payment card.\n Values:\n First\n Subsequent - Mastercard only supports Subsequent"
          },
          "is_scheduled": {
            "type": "boolean",
            "description": "Indicates if the transaction is scheduled or part of an installment.\n Values:\n True - Transaction is scheduled.\n False - Transaction is part of an installment. Installments are only available in the US."
          },
          "initiator": {
            "enum": [
              "MERCHANT",
              "CARDHOLDER"
            ],
            "type": "string",
            "description": "Indicates with whose consent the transaction is initiated.\n Values:\n Cardholder\n Merchant"
          },
          "installment_info": {
            "description": "Installment information for the transaction.",
            "properties": {
              "bill_pay_indicator": {
                "enum": [
                  "Recurring",
                  "Installment"
                ],
                "type": "string",
                "description": "Indicates if the transaction is a recurring or installment payment. \n Values:\n Installment\n Recurring - For Canadian merchants, the value must be Recurring."
              },
              "invoice_number": {
                "type": "string",
                "description": "Invoice number of the installment or recurring transaction."
              },
              "description": {
                "type": "string",
                "description": "Description of the installment or recurring transaction."
              }
            }
          }
        }
      },
      "soft_descriptor": {
        "description": "Soft descriptor information for a transaction. This information displays on the customer's card statement in place of the merchant's business information on record.\n",
        "properties": {
          "dba_name": {
            "type": "string",
            "maxLength": 38,
            "description": "Merchant doing business as (DBA) name, product, or service. \nLength: Max 38 alphanumeric characters\n"
          },
          "street": {
            "type": "string",
            "description": "Merchant's street address."
          },
          "city": {
            "type": "string",
            "description": "Merchant's city."
          },
          "region": {
            "type": "string",
            "maxLength": 2,
            "description": "Merchant's state. Format: as a two-character postal abbreviation (US only).\n"
          },
          "postal_code": {
            "type": "string",
            "description": "Merchant's postal code."
          },
          "country_code": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "description": "Merchant's country code.\nFormat: 3-digit code; see the [Country code reference](https://docs.clover.com/docs/country-code-reference).\n"
          },
          "merchant_contact_info": {
            "type": "string",
            "description": "Merchant's phone number or email address. Format: Max 13 characters for Discover and Visa transactions."
          }
        }
      },
      "purchase_card_level2": {
        "description": "Additional data for purchase card transactions (US only).",
        "properties": {
          "tax_amount": {
            "type": "integer",
            "format": "int64",
            "description": "Part of the transaction amount that indicates the sales tax. A pc_order_number is required when including a `tax_amount`."
          },
          "tax_indicator": {
            "type": "integer",
            "description": "Taxable status of the transaction. Values: 0 – No tax information provided 1 – Tax amount is provided 2 – Purchase item is tax exempt or non-taxable",
            "enum": [
              0,
              1,
              2
            ]
          },
          "purchase_identifier": {
            "type": "string",
            "description": "Identifier, such as stock keeping unit (SKU), code or reference number that the merchant or customer uses to identify the purchase."
          },
          "pc_order_number": {
            "type": "string",
            "description": "Order number or customer reference number reported as part of the purchase card data."
          },
          "discount_amount": {
            "type": "integer",
            "format": "int64",
            "description": "Discount amount for the transaction. Format: Cents"
          },
          "freight_amount": {
            "type": "integer",
            "format": "int64",
            "description": "Freight amount included for the transaction. Format: Cents"
          },
          "duty_amount": {
            "type": "integer",
            "format": "int64",
            "description": "Duty amount included for the transaction. Format: Cents"
          },
          "destination_postal_code": {
            "type": "string",
            "description": "Postal or ZIP code of the delivery location."
          },
          "ship_from_postal_code": {
            "type": "string",
            "description": "Postal or ZIP code of the shipping location."
          },
          "destination_country_code": {
            "type": "integer",
            "description": "Delivery location country code.\nFormat: 3-digit code; see the [Country code reference](https://docs.clover.com/docs/country-code-reference)."
          },
          "merchant_tax_id": {
            "type": "string",
            "description": "Only for Mastercard. Identifier (ID) for the tax collected by the merchant for the transaction."
          },
          "product_description": {
            "type": "string",
            "description": "Description of the purchased item."
          }
        }
      },
      "purchase_card_level3": {
        "description": "Additional data for purchase card level3 transactions (US only). Supported for Mastercard and Visa only. Purchase card level2 is mandatory for level3 transactions.",
        "properties": {
          "service_code": {
            "type": "string",
            "maxLength": 3,
            "description": "Required for all non-keyed transactions and swiped transactions. Service code extracted from the track data."
          },
          "magnetic_Stripe_Ind": {
            "type": "boolean",
            "description": "Value of true indicates a magnetic stripe swiped transaction.\n Values:\n True\n False"
          },
          "level3_line_items": {
            "description": "List of level3 line items.",
            "items": {
              "description": "List of level3 line items.",
              "properties": {
                "item_description": {
                  "type": "string",
                  "maxLength": 35,
                  "description": "Merchandise description; required for reduced interchange.\n Required for Mastercard.\n Format:\n For Mastercard, level 3 must not be all 0s (zeros) or all high/low values.\n For Visa, level 3 must not be all spaces or all 0s (zeros).\n Length: Max 35 characters"
                },
                "product_code": {
                  "type": "string",
                  "maxLength": 12,
                  "description": "Required for Mastercard and Visa. Product or Universal Product Code (UPC). Format: Must not be all spaces"
                },
                "unit_cost": {
                  "type": "integer",
                  "format": "int64",
                  "maxLength": 13,
                  "description": "Unit cost of level3 line item. Format: For Visa must not be all spaces or 0s (zeros)"
                },
                "quantity": {
                  "type": "number",
                  "format": "decimal",
                  "description": "Item quantity information; required for reduced interchange.\nFormat: Must not be all spaces or 0s (zeros); Last 4 digits are considered decimal places, example: 20.0000"
                },
                "discount_amount": {
                  "type": "integer",
                  "format": "int64",
                  "maxLength": 13,
                  "description": "Discount amount applied to the level3 line item.\nFormat: For Visa level2 must not be all 0s (zeros), if a discount exists"
                },
                "unit_of_measure": {
                  "type": "string",
                  "maxLength": 12,
                  "description": "Unit of measurement codes used for international trade. Required for reduced interchange for both Mastercard and Visa. See [Unit of Measurement codes](https://docs.clover.com/docs/units-of-measurement-codes)."
                },
                "commodity_code": {
                  "type": "string",
                  "maxLength": 12,
                  "description": "Indicates classification of purchased items. Required for Visa."
                }
              },
              "required": [
                "item_description",
                "quantity",
                "unit_of_measure",
                "product_code",
                "unit_cost"
              ]
            },
            "type": "array"
          }
        }
      },
      "level3_line_item": {
        "description": "List of level3 line items.",
        "properties": {
          "item_description": {
            "type": "string",
            "maxLength": 35,
            "description": "Merchandise description; required for reduced interchange.\n Required for Mastercard.\n Format:\n For Mastercard, level 3 must not be all 0s (zeros) or all high/low values.\n For Visa, level 3 must not be all spaces or all 0s (zeros).\n Length: Max 35 characters"
          },
          "product_code": {
            "type": "string",
            "maxLength": 12,
            "description": "Required for Mastercard and Visa. Product or Universal Product Code (UPC). Format: Must not be all spaces"
          },
          "unit_cost": {
            "type": "integer",
            "format": "int64",
            "maxLength": 13,
            "description": "Unit cost of level3 line item. Format: For Visa must not be all spaces or 0s (zeros)"
          },
          "quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Item quantity information; required for reduced interchange.\nFormat: Must not be all spaces or 0s (zeros); Last 4 digits are considered decimal places, example: 20.0000"
          },
          "discount_amount": {
            "type": "integer",
            "format": "int64",
            "maxLength": 13,
            "description": "Discount amount applied to the level3 line item.\nFormat: For Visa level2 must not be all 0s (zeros), if a discount exists"
          },
          "unit_of_measure": {
            "type": "string",
            "maxLength": 12,
            "description": "Unit of measurement codes used for international trade. Required for reduced interchange for both Mastercard and Visa. See [Unit of Measurement codes](https://docs.clover.com/docs/units-of-measurement-codes)."
          },
          "commodity_code": {
            "type": "string",
            "maxLength": 12,
            "description": "Indicates classification of purchased items. Required for Visa."
          }
        },
        "required": [
          "item_description",
          "quantity",
          "unit_of_measure",
          "product_code",
          "unit_cost"
        ]
      },
      "customer_request": {
        "properties": {
          "email": {
            "type": "string",
            "description": "Customer email address"
          },
          "firstName": {
            "type": "string",
            "description": "First (given) name of the customer"
          },
          "lastName": {
            "type": "string",
            "description": "Last name (surname) of the customer"
          },
          "name": {
            "type": "string",
            "description": "Full name of the customer"
          },
          "source": {
            "type": "string",
            "description": "The tokenized card (cToken) which is saved as a card on file for future transactions"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the customer"
          },
          "address": {
            "anyOf": [
              {
                "properties": {
                  "city": {
                    "description": "The city, district, suburb, town, or village",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "country": {
                    "description": "Two-letter country code",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "line1": {
                    "description": "First line of the address (includes the street address, PO box, or company name)",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "line2": {
                    "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "ZIP or postal code",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "state": {
                    "description": "The state, county, province, or region",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  }
                },
                "title": "Address",
                "type": "object",
                "x-expandableFields": []
              }
            ],
            "description": "customer address",
            "nullable": true
          }
        }
      },
      "error": {
        "description": "Error response from the API",
        "properties": {
          "error": {
            "properties": {
              "charge": {
                "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                "maxLength": 5000,
                "type": "string"
              },
              "code": {
                "description": "Additional information about the error that users can use to identify the issue.",
                "maxLength": 5000,
                "type": "string"
              },
              "decline_code": {
                "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                "maxLength": 5000,
                "type": "string"
              },
              "doc_url": {
                "description": "URL for more information about the reported error code.",
                "maxLength": 5000,
                "type": "string"
              },
              "message": {
                "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                "maxLength": 40000,
                "type": "string"
              },
              "param": {
                "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                "maxLength": 5000,
                "type": "string"
              },
              "type": {
                "description": "Returned error type.",
                "enum": [
                  "api_connection_error",
                  "api_error",
                  "authentication_error",
                  "card_error",
                  "idempotency_error",
                  "invalid_request_error",
                  "rate_limit_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "title": "APIErrors",
            "type": "object",
            "x-expandableFields": [
              "payment_intent",
              "payment_method",
              "source"
            ]
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "api_errors": {
        "properties": {
          "charge": {
            "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
            "maxLength": 5000,
            "type": "string"
          },
          "code": {
            "description": "Additional information about the error that users can use to identify the issue.",
            "maxLength": 5000,
            "type": "string"
          },
          "decline_code": {
            "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
            "maxLength": 5000,
            "type": "string"
          },
          "doc_url": {
            "description": "URL for more information about the reported error code.",
            "maxLength": 5000,
            "type": "string"
          },
          "message": {
            "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
            "maxLength": 40000,
            "type": "string"
          },
          "param": {
            "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
            "maxLength": 5000,
            "type": "string"
          },
          "type": {
            "description": "Returned error type.",
            "enum": [
              "api_connection_error",
              "api_error",
              "authentication_error",
              "card_error",
              "idempotency_error",
              "invalid_request_error",
              "rate_limit_error"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "APIErrors",
        "type": "object",
        "x-expandableFields": [
          "payment_intent",
          "payment_method",
          "source"
        ]
      },
      "charge": {
        "properties": {
          "amount": {
            "description": "Total charge amount in the smallest monetary unit of the merchant's currency",
            "type": "integer",
            "format": "int64"
          },
          "tax_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Amount paid in taxes"
          },
          "tip_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Amount paid in tips"
          },
          "additional_charges": {
            "description": "Data about any surcharge or other fee applied to a transaction",
            "type": "object",
            "properties": {
              "amount": {
                "description": "The number of cents charged",
                "type": "integer"
              },
              "id": {
                "description": "A unique idendifier of the surcharge",
                "type": "string",
                "minimum": 13,
                "maximum": 13
              },
              "rate": {
                "description": "The percentage of the total assessed as a surcharge or other fee. This value is set when a merchant is boarded to Clover Percentages are defined to four decimal places. For example, the value of a 3.5% surcharge is `35000` (3.5*10000).",
                "type": "integer"
              },
              "type": {
                "description": "A descriptor of the additional charge collected with the payment",
                "type": "string",
                "enum": [
                  "CREDIT_SURCHARGE"
                ]
              }
            }
          },
          "amount_refunded": {
            "description": "Amount refunded in cents. This value can be less than the amount property on the charge if a partial refund is issued.",
            "type": "integer",
            "format": "int64"
          },
          "partial_auth": {
            "description": "Indicates if partial approval has occurred.",
            "type": "boolean"
          },
          "billing_details": {
            "properties": {
              "address": {
                "anyOf": [
                  {
                    "properties": {
                      "city": {
                        "description": "The city, district, suburb, town, or village",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "country": {
                        "description": "Two-letter country code",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "line1": {
                        "description": "First line of the address (includes the street address, PO box, or company name)",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "line2": {
                        "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "postal_code": {
                        "description": "ZIP or postal code",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "state": {
                        "description": "The state, county, province, or region",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "title": "Address",
                    "type": "object",
                    "x-expandableFields": []
                  }
                ],
                "description": "Billing address",
                "nullable": true
              },
              "email": {
                "description": "Email address",
                "maxLength": 5000,
                "nullable": true,
                "type": "string"
              },
              "name": {
                "description": "Full name",
                "maxLength": 5000,
                "nullable": true,
                "type": "string"
              },
              "phone": {
                "description": "Billing phone number (including extension)",
                "maxLength": 5000,
                "nullable": true,
                "type": "string"
              }
            },
            "title": "billing_details",
            "type": "object",
            "x-expandableFields": [
              "address"
            ]
          },
          "captured": {
            "description": "For charges not captured when the charge was created, this value will be `false` if the charge remains uncaptured or `true` if it has been captured",
            "type": "boolean"
          },
          "created": {
            "description": "Creation time of the object (Unix timestamp in milliseconds).",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter ISO 4217 currency code (in lowercase).",
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "properties": {
                  "created": {
                    "description": "Creation time of the object (Unix timestamp in milliseconds)",
                    "format": "int64",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "Three-letter ISO 4217 currency code (in lowercase)",
                    "type": "string"
                  },
                  "default_source": {
                    "description": "UUID of the customer's default payment `source`",
                    "nullable": true,
                    "type": "string"
                  },
                  "delinquent": {
                    "description": "For an invoice charged automatically, `delinquent` is `true` if the invoice's charge fails. For an invoice that is sent to the customer, `delinquent` is `true` if the invoice is not paid by its due date.",
                    "nullable": true,
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Container for user-facing information about the object",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "email": {
                    "description": "Customer email address",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique ID",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "maxLength": 500,
                      "type": "string"
                    },
                    "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "object": {
                    "description": "Object type. Objects with the same type have the same value.",
                    "enum": [
                      "customer"
                    ],
                    "type": "string"
                  },
                  "shipping": {
                    "anyOf": [
                      {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "description": "The city, district, suburb, town, or village",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "country": {
                                "description": "Two-letter country code",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "line1": {
                                "description": "First line of the address (includes the street address, PO box, or company name)",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "line2": {
                                "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "ZIP or postal code",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "state": {
                                "description": "The state, county, province, or region",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              }
                            },
                            "title": "Address",
                            "type": "object",
                            "x-expandableFields": []
                          },
                          "carrier": {
                            "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Product recipient's name",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "phone": {
                            "description": "Product recipient's phone (including extension)",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "tracking_number": {
                            "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "address"
                        ],
                        "title": "Shipping",
                        "type": "object",
                        "x-expandableFields": [
                          "address"
                        ]
                      }
                    ],
                    "description": "Customer mailing and shipping address. This information appears on invoices emailed to the customer.",
                    "nullable": true
                  },
                  "sources": {
                    "description": "Customer's payment `source`s if available",
                    "properties": {
                      "data": {
                        "description": "List of customer payment `source`s",
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "has_more": {
                        "description": "Set to `true` if there is another page of list items after the current page",
                        "type": "boolean"
                      },
                      "object": {
                        "description": "Object type, set to list. Objects with the same type have the same value.",
                        "enum": [
                          "list"
                        ],
                        "type": "string"
                      },
                      "url": {
                        "description": "URL of the list of sources",
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": [
                      "data",
                      "has_more",
                      "object",
                      "url"
                    ],
                    "title": "ApmsSourcesSourceList",
                    "type": "object",
                    "x-expandableFields": [
                      "data"
                    ]
                  }
                },
                "required": [
                  "created",
                  "id",
                  "livemode",
                  "object",
                  "sources"
                ],
                "title": "Customer",
                "type": "object",
                "x-expandableFields": [
                  "default_source",
                  "discount",
                  "invoice_settings",
                  "shipping",
                  "sources",
                  "subscriptions"
                ],
                "x-resourceId": "customer"
              }
            ],
            "description": "Unique ID of the customer associated with the charge.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "properties": {
                    "created": {
                      "description": "Creation time of the object (Unix timestamp in milliseconds)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "currency": {
                      "description": "Three-letter ISO 4217 currency code (in lowercase)",
                      "type": "string"
                    },
                    "default_source": {
                      "description": "UUID of the customer's default payment `source`",
                      "nullable": true,
                      "type": "string"
                    },
                    "delinquent": {
                      "description": "For an invoice charged automatically, `delinquent` is `true` if the invoice's charge fails. For an invoice that is sent to the customer, `delinquent` is `true` if the invoice is not paid by its due date.",
                      "nullable": true,
                      "type": "boolean"
                    },
                    "description": {
                      "description": "Container for user-facing information about the object",
                      "maxLength": 5000,
                      "nullable": true,
                      "type": "string"
                    },
                    "email": {
                      "description": "Customer email address",
                      "maxLength": 5000,
                      "nullable": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique ID",
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "metadata": {
                      "additionalProperties": {
                        "maxLength": 500,
                        "type": "string"
                      },
                      "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                      "type": "object"
                    },
                    "object": {
                      "description": "Object type. Objects with the same type have the same value.",
                      "enum": [
                        "customer"
                      ],
                      "type": "string"
                    },
                    "shipping": {
                      "anyOf": [
                        {
                          "properties": {
                            "address": {
                              "properties": {
                                "city": {
                                  "description": "The city, district, suburb, town, or village",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                },
                                "country": {
                                  "description": "Two-letter country code",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                },
                                "line1": {
                                  "description": "First line of the address (includes the street address, PO box, or company name)",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                },
                                "line2": {
                                  "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                },
                                "postal_code": {
                                  "description": "ZIP or postal code",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                },
                                "state": {
                                  "description": "The state, county, province, or region",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                }
                              },
                              "title": "Address",
                              "type": "object",
                              "x-expandableFields": []
                            },
                            "carrier": {
                              "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Product recipient's name",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "phone": {
                              "description": "Product recipient's phone (including extension)",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "tracking_number": {
                              "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "required": [
                            "address"
                          ],
                          "title": "Shipping",
                          "type": "object",
                          "x-expandableFields": [
                            "address"
                          ]
                        }
                      ],
                      "description": "Customer mailing and shipping address. This information appears on invoices emailed to the customer.",
                      "nullable": true
                    },
                    "sources": {
                      "description": "Customer's payment `source`s if available",
                      "properties": {
                        "data": {
                          "description": "List of customer payment `source`s",
                          "items": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "has_more": {
                          "description": "Set to `true` if there is another page of list items after the current page",
                          "type": "boolean"
                        },
                        "object": {
                          "description": "Object type, set to list. Objects with the same type have the same value.",
                          "enum": [
                            "list"
                          ],
                          "type": "string"
                        },
                        "url": {
                          "description": "URL of the list of sources",
                          "maxLength": 5000,
                          "type": "string"
                        }
                      },
                      "required": [
                        "data",
                        "has_more",
                        "object",
                        "url"
                      ],
                      "title": "ApmsSourcesSourceList",
                      "type": "object",
                      "x-expandableFields": [
                        "data"
                      ]
                    }
                  },
                  "required": [
                    "created",
                    "id",
                    "livemode",
                    "object",
                    "sources"
                  ],
                  "title": "Customer",
                  "type": "object",
                  "x-expandableFields": [
                    "default_source",
                    "discount",
                    "invoice_settings",
                    "shipping",
                    "sources",
                    "subscriptions"
                  ],
                  "x-resourceId": "customer"
                }
              ]
            }
          },
          "description": {
            "description": "Container for user-facing information about the object.",
            "maxLength": 40000,
            "nullable": true,
            "type": "string"
          },
          "external_reference_id": {
            "type": "string",
            "description": "An ID, such as an invoice or PO number, that is passed to the merchant's gateway and ultimately appears in settlement records.  Format supported for US, spaces in between are allowed and including spaces length max to be 12 including alphanumeric characters"
          },
          "auth_code": {
            "description": "If available, the authorization code - successful charge code.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "ref_num": {
            "description": "-> If available, the reference number returned from the payment gateway if the transaction is successful.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "failure_code": {
            "description": "If available, the error code explaining the reason for the charge. failure",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "failure_message": {
            "description": "If available, detailed information about the reason for the charge. failure",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "warning_message": {
            "description": "If available, detailed warning information about the charge. E.g., missing original transaction id for c-token. This does not cause charge failure or decline.",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique ID",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Set to `true` if the object is in production. `Set` to false if the object is in sandbox.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "Object type. Objects with the same type have the same value.",
            "enum": [
              "charge"
            ],
            "type": "string"
          },
          "order": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/order"
              }
            ],
            "description": "Unique ID of the order associated with the charge",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/order"
                }
              ]
            }
          },
          "outcome": {
            "description": "Explanation of whether and why the payment was accepted",
            "type": "object",
            "anyOf": [
              {
                "maxLength": 5000
              },
              {
                "properties": {
                  "network_status": {
                    "description": "The status of the transaction with respect to the card network associated with the card.",
                    "type": "string",
                    "enum": [
                      "approved_by_network",
                      "declined_by_network",
                      "not_sent_to_network",
                      "reversed_after_approval"
                    ]
                  },
                  "reason": {
                    "description": "A more detailed explanation of the outcome",
                    "type": "string",
                    "nullable": true
                  },
                  "rule": {
                    "description": "Unique ID of the matching rule used to evaluate the payment",
                    "type": "string"
                  },
                  "seller_message": {
                    "description": "A detailed description of the outcome type and reason (intended for the merchant, not the customer).",
                    "type": "string"
                  },
                  "type": {
                    "description": "Basic explanation of the charge's outcome.",
                    "type": "string",
                    "enum": [
                      "authorized",
                      "blocked",
                      "invalid",
                      "issuer_declined",
                      "manual_review"
                    ]
                  }
                },
                "title": "ChargeOutcome",
                "type": "object"
              }
            ]
          },
          "paid": {
            "description": "Set to `true` if the charge is successful or authorized for capture at a later point",
            "type": "boolean"
          },
          "payment_method": {
            "description": "Unique ID of the payment method used for the charge",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "receipt_email": {
            "description": "Email address which receives the charge receipt",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "receipt_number": {
            "description": "Transaction number that appears on the receipt emailed for this charge. The attribute is set to `null` until a receipt is sent.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "receipt_url": {
            "description": "URL where the charge receipt can be accessed. The receipt displays the latest state of the charge, including any refunds. If the charge is for an invoice, the receipt is displayed as an invoice.",
            "maxLength": 5000,
            "type": "string"
          },
          "refunded": {
            "description": "Set to `true` if the charge is fully refunded or `false` if only partially refunded",
            "type": "boolean"
          },
          "refunds": {
            "description": "List of refunds applied to the charge",
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/refund"
                },
                "type": "array"
              },
              "has_more": {
                "description": "Set to `true` if there is another page of list items after the current page",
                "type": "boolean"
              },
              "object": {
                "description": "Object type. Objects with the same type have the same value.",
                "enum": [
                  "list"
                ],
                "type": "string"
              },
              "url": {
                "description": "URL of the list of refunds",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": [
              "data",
              "has_more",
              "object",
              "url"
            ],
            "title": "RefundList",
            "type": "object",
            "x-expandableFields": [
              "data"
            ]
          },
          "shipping": {
            "anyOf": [
              {
                "properties": {
                  "address": {
                    "properties": {
                      "city": {
                        "description": "The city, district, suburb, town, or village",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "country": {
                        "description": "Two-letter country code",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "line1": {
                        "description": "First line of the address (includes the street address, PO box, or company name)",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "line2": {
                        "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "postal_code": {
                        "description": "ZIP or postal code",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "state": {
                        "description": "The state, county, province, or region",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "title": "Address",
                    "type": "object",
                    "x-expandableFields": []
                  },
                  "carrier": {
                    "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Product recipient's name",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "phone": {
                    "description": "Product recipient's phone (including extension)",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "tracking_number": {
                    "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "address"
                ],
                "title": "Shipping",
                "type": "object",
                "x-expandableFields": [
                  "address"
                ]
              }
            ],
            "description": "Shipping information for the charge",
            "nullable": true
          },
          "source": {
            "title": "Payment source (card)",
            "description": "The payment source charged. This can be a token or an alternate tender.",
            "nullable": true,
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "maxLength": 5000,
                "description": "Unique identifier (Clover token)"
              },
              "object": {
                "type": "string",
                "maxLength": 5000,
                "description": "Type of source (for example, a card or bank account)"
              },
              "address_city": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "City segment of the provided billing address"
              },
              "address_country": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "Country segment of the provided billing address"
              },
              "address_line1": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "First line of the provided billing address. This includes the building number and street name."
              },
              "address_line1_check": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "If an `address_line1` was provided, the result of the verification check (one of `pass`, `failed`, `unavailable`, or `unchecked`)",
                "enum": [
                  "pass",
                  "failed",
                  "unavailable",
                  "unchecked"
                ]
              },
              "address_line2": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "Second line of the provided billing address (the room, suite, or apartment number)"
              },
              "address_state": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "State or province segment of the provided billing address"
              },
              "address_zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "Zip or postal code segment of the provided billing address"
              },
              "address_zip_check": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "If an `address_zip` was provided, the result of the verification check (one of `pass`, `failed`, `unavailable`, or `unchecked`)",
                "enum": [
                  "pass",
                  "failed",
                  "unavailable",
                  "unchecked"
                ]
              },
              "brand": {
                "type": "string",
                "maxLength": 5000,
                "nullable": true,
                "description": "Brand of card presented by the customer"
              },
              "country": {
                "type": "string",
                "maxLength": 5000,
                "nullable": true,
                "description": "Two-letter ISO code for the country where the card was issued"
              },
              "cvc_check": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "If a card security code was provided, the result of the verification check (one of `pass`, `failed`, `unavailable`, or `unchecked`)",
                "enum": [
                  "pass",
                  "failed",
                  "unavailable",
                  "unchecked"
                ]
              },
              "exp_month": {
                "type": "string",
                "maxLength": 5000,
                "description": "Two-digit number representing the card's expiration month"
              },
              "exp_year": {
                "type": "string",
                "maxLength": 5000,
                "description": "Four-digit number representing the card's expiration year"
              },
              "fingerprint": {
                "type": "string",
                "maxLength": 5000,
                "description": "Unique identifier for this source"
              },
              "first6": {
                "type": "string",
                "maxLength": 5000,
                "description": "First six digits of the card PAN"
              },
              "funding": {
                "type": "string",
                "maxLength": 5000,
                "description": "Type of card funding (one of `credit`, `debit`, `prepaid`, or `unknown`)"
              },
              "last4": {
                "type": "string",
                "maxLength": 5000,
                "description": "Last four digits of the card PAN"
              },
              "name": {
                "type": "string",
                "maxLength": 5000,
                "description": "Cardholder name"
              }
            }
          },
          "status": {
            "description": "Payment status",
            "enum": [
              "succeeded",
              "pending",
              "failed"
            ],
            "maxLength": 5000,
            "type": "string"
          },
          "stored_credentials": {
            "description": "Stored credentials for a transaction. For subsequent payments with a saved card, stored credentials are available only with multi-pay (mTokens) tokens. [See Saving a card for future transactions](https://docs.clover.com/docs/ecommerce-saving-card) for more information.",
            "properties": {
              "sequence": {
                "enum": [
                  "FIRST",
                  "SUBSEQUENT"
                ],
                "type": "string",
                "description": "Indicates sequence of the transaction for the same payment card.\n Values:\n First\n Subsequent - Mastercard only supports Subsequent"
              },
              "is_scheduled": {
                "type": "boolean",
                "description": "Indicates if the transaction is scheduled or part of an installment.\n Values:\n True - Transaction is scheduled.\n False - Transaction is part of an installment. Installments are only available in the US."
              },
              "initiator": {
                "enum": [
                  "MERCHANT",
                  "CARDHOLDER"
                ],
                "type": "string",
                "description": "Indicates with whose consent the transaction is initiated.\n Values:\n Cardholder\n Merchant"
              },
              "installment_info": {
                "description": "Installment information for the transaction.",
                "properties": {
                  "bill_pay_indicator": {
                    "enum": [
                      "Recurring",
                      "Installment"
                    ],
                    "type": "string",
                    "description": "Indicates if the transaction is a recurring or installment payment. \n Values:\n Installment\n Recurring - For Canadian merchants, the value must be Recurring."
                  },
                  "invoice_number": {
                    "type": "string",
                    "description": "Invoice number of the installment or recurring transaction."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the installment or recurring transaction."
                  }
                }
              }
            }
          },
          "soft_descriptor": {
            "description": "Soft descriptor information for a transaction. This information displays on the customer's card statement in place of the merchant's business information on record.\n",
            "properties": {
              "dba_name": {
                "type": "string",
                "maxLength": 38,
                "description": "Merchant doing business as (DBA) name, product, or service. \nLength: Max 38 alphanumeric characters\n"
              },
              "street": {
                "type": "string",
                "description": "Merchant's street address."
              },
              "city": {
                "type": "string",
                "description": "Merchant's city."
              },
              "region": {
                "type": "string",
                "maxLength": 2,
                "description": "Merchant's state. Format: as a two-character postal abbreviation (US only).\n"
              },
              "postal_code": {
                "type": "string",
                "description": "Merchant's postal code."
              },
              "country_code": {
                "type": "string",
                "minLength": 3,
                "maxLength": 3,
                "description": "Merchant's country code.\nFormat: 3-digit code; see the [Country code reference](https://docs.clover.com/docs/country-code-reference).\n"
              },
              "merchant_contact_info": {
                "type": "string",
                "description": "Merchant's phone number or email address. Format: Max 13 characters for Discover and Visa transactions."
              }
            }
          }
        },
        "required": [
          "amount",
          "amount_refunded",
          "billing_details",
          "captured",
          "created",
          "currency",
          "id",
          "livemode",
          "metadata",
          "object",
          "paid",
          "receipt_url",
          "refunded",
          "refunds",
          "status"
        ],
        "title": "Charge",
        "type": "object",
        "x-expandableFields": [
          "billing_details",
          "customer",
          "dispute",
          "order",
          "outcome",
          "refunds",
          "shipping",
          "source"
        ],
        "x-resourceId": "charge"
      },
      "charge_outcome": {
        "properties": {
          "network_status": {
            "description": "The status of the transaction with respect to the card network associated with the card.",
            "type": "string",
            "enum": [
              "approved_by_network",
              "declined_by_network",
              "not_sent_to_network",
              "reversed_after_approval"
            ]
          },
          "reason": {
            "description": "A more detailed explanation of the outcome",
            "type": "string",
            "nullable": true
          },
          "rule": {
            "description": "Unique ID of the matching rule used to evaluate the payment",
            "type": "string"
          },
          "seller_message": {
            "description": "A detailed description of the outcome type and reason (intended for the merchant, not the customer).",
            "type": "string"
          },
          "type": {
            "description": "Basic explanation of the charge's outcome.",
            "type": "string",
            "enum": [
              "authorized",
              "blocked",
              "invalid",
              "issuer_declined",
              "manual_review"
            ]
          }
        },
        "title": "ChargeOutcome",
        "type": "object"
      },
      "order": {
        "properties": {
          "amount": {
            "description": "Total order amount in the smallest monetary unit of the merchant's currency",
            "type": "integer",
            "format": "int64"
          },
          "amount_paid": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Authorized paid amount whether it is full approved amount or partial."
          },
          "amount_due": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Amount still due toward the order total"
          },
          "tax_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Total tax amount for the order"
          },
          "tax_amount_paid": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Amount currently paid toward the tax total"
          },
          "tip_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "Amount paid in tips"
          },
          "partial_auth": {
            "description": "Indicates if partial approval has occurred.",
            "type": "boolean"
          },
          "additional_charges": {
            "description": "Data about any surcharge or other fee applied to a transaction",
            "type": "object",
            "properties": {
              "amount": {
                "description": "The number of cents charged",
                "type": "integer"
              },
              "id": {
                "description": "A unique idendifier of the surcharge",
                "type": "string",
                "minimum": 13,
                "maximum": 13
              },
              "rate": {
                "description": "The percentage of the total assessed as a surcharge or other fee. This value is set when a merchant is boarded to Clover Percentages are defined to four decimal places. For example, the value of a 3.5% surcharge is `35000` (3.5*10000).",
                "type": "integer"
              },
              "type": {
                "description": "A descriptor of the additional charge collected with the payment",
                "type": "string",
                "enum": [
                  "CREDIT_SURCHARGE"
                ]
              }
            }
          },
          "amount_returned": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "charge": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "UUID of the order's payment. The payment UUID is available if the order status is `paid`, `fulfilled`, or `refunded`.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "auth_code": {
            "description": "If available, the authorization code - successful charge code when order is paid",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "ref_num": {
            "description": "-> If available, the reference number returned from the payment gateway if the transaction is successful",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "warning_message": {
            "description": "If available, detailed warning information about the order or associated charge (for example, missing original transaction id for c-token)",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Creation time of the object (Unix timestamp in milliseconds)",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter ISO 4217 currency code (in lowercase)",
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "properties": {
                  "created": {
                    "description": "Creation time of the object (Unix timestamp in milliseconds)",
                    "format": "int64",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "Three-letter ISO 4217 currency code (in lowercase)",
                    "type": "string"
                  },
                  "default_source": {
                    "description": "UUID of the customer's default payment `source`",
                    "nullable": true,
                    "type": "string"
                  },
                  "delinquent": {
                    "description": "For an invoice charged automatically, `delinquent` is `true` if the invoice's charge fails. For an invoice that is sent to the customer, `delinquent` is `true` if the invoice is not paid by its due date.",
                    "nullable": true,
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Container for user-facing information about the object",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "email": {
                    "description": "Customer email address",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique ID",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "maxLength": 500,
                      "type": "string"
                    },
                    "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "object": {
                    "description": "Object type. Objects with the same type have the same value.",
                    "enum": [
                      "customer"
                    ],
                    "type": "string"
                  },
                  "shipping": {
                    "anyOf": [
                      {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "description": "The city, district, suburb, town, or village",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "country": {
                                "description": "Two-letter country code",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "line1": {
                                "description": "First line of the address (includes the street address, PO box, or company name)",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "line2": {
                                "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "ZIP or postal code",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "state": {
                                "description": "The state, county, province, or region",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              }
                            },
                            "title": "Address",
                            "type": "object",
                            "x-expandableFields": []
                          },
                          "carrier": {
                            "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Product recipient's name",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "phone": {
                            "description": "Product recipient's phone (including extension)",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "tracking_number": {
                            "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "address"
                        ],
                        "title": "Shipping",
                        "type": "object",
                        "x-expandableFields": [
                          "address"
                        ]
                      }
                    ],
                    "description": "Customer mailing and shipping address. This information appears on invoices emailed to the customer.",
                    "nullable": true
                  },
                  "sources": {
                    "description": "Customer's payment `source`s if available",
                    "properties": {
                      "data": {
                        "description": "List of customer payment `source`s",
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "has_more": {
                        "description": "Set to `true` if there is another page of list items after the current page",
                        "type": "boolean"
                      },
                      "object": {
                        "description": "Object type, set to list. Objects with the same type have the same value.",
                        "enum": [
                          "list"
                        ],
                        "type": "string"
                      },
                      "url": {
                        "description": "URL of the list of sources",
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": [
                      "data",
                      "has_more",
                      "object",
                      "url"
                    ],
                    "title": "ApmsSourcesSourceList",
                    "type": "object",
                    "x-expandableFields": [
                      "data"
                    ]
                  }
                },
                "required": [
                  "created",
                  "id",
                  "livemode",
                  "object",
                  "sources"
                ],
                "title": "Customer",
                "type": "object",
                "x-expandableFields": [
                  "default_source",
                  "discount",
                  "invoice_settings",
                  "shipping",
                  "sources",
                  "subscriptions"
                ],
                "x-resourceId": "customer"
              }
            ],
            "description": "The customer placing the order",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "properties": {
                    "created": {
                      "description": "Creation time of the object (Unix timestamp in milliseconds)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "currency": {
                      "description": "Three-letter ISO 4217 currency code (in lowercase)",
                      "type": "string"
                    },
                    "default_source": {
                      "description": "UUID of the customer's default payment `source`",
                      "nullable": true,
                      "type": "string"
                    },
                    "delinquent": {
                      "description": "For an invoice charged automatically, `delinquent` is `true` if the invoice's charge fails. For an invoice that is sent to the customer, `delinquent` is `true` if the invoice is not paid by its due date.",
                      "nullable": true,
                      "type": "boolean"
                    },
                    "description": {
                      "description": "Container for user-facing information about the object",
                      "maxLength": 5000,
                      "nullable": true,
                      "type": "string"
                    },
                    "email": {
                      "description": "Customer email address",
                      "maxLength": 5000,
                      "nullable": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique ID",
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "metadata": {
                      "additionalProperties": {
                        "maxLength": 500,
                        "type": "string"
                      },
                      "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                      "type": "object"
                    },
                    "object": {
                      "description": "Object type. Objects with the same type have the same value.",
                      "enum": [
                        "customer"
                      ],
                      "type": "string"
                    },
                    "shipping": {
                      "anyOf": [
                        {
                          "properties": {
                            "address": {
                              "properties": {
                                "city": {
                                  "description": "The city, district, suburb, town, or village",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                },
                                "country": {
                                  "description": "Two-letter country code",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                },
                                "line1": {
                                  "description": "First line of the address (includes the street address, PO box, or company name)",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                },
                                "line2": {
                                  "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                },
                                "postal_code": {
                                  "description": "ZIP or postal code",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                },
                                "state": {
                                  "description": "The state, county, province, or region",
                                  "maxLength": 5000,
                                  "nullable": true,
                                  "type": "string"
                                }
                              },
                              "title": "Address",
                              "type": "object",
                              "x-expandableFields": []
                            },
                            "carrier": {
                              "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Product recipient's name",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "phone": {
                              "description": "Product recipient's phone (including extension)",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            },
                            "tracking_number": {
                              "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
                              "maxLength": 5000,
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "required": [
                            "address"
                          ],
                          "title": "Shipping",
                          "type": "object",
                          "x-expandableFields": [
                            "address"
                          ]
                        }
                      ],
                      "description": "Customer mailing and shipping address. This information appears on invoices emailed to the customer.",
                      "nullable": true
                    },
                    "sources": {
                      "description": "Customer's payment `source`s if available",
                      "properties": {
                        "data": {
                          "description": "List of customer payment `source`s",
                          "items": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "has_more": {
                          "description": "Set to `true` if there is another page of list items after the current page",
                          "type": "boolean"
                        },
                        "object": {
                          "description": "Object type, set to list. Objects with the same type have the same value.",
                          "enum": [
                            "list"
                          ],
                          "type": "string"
                        },
                        "url": {
                          "description": "URL of the list of sources",
                          "maxLength": 5000,
                          "type": "string"
                        }
                      },
                      "required": [
                        "data",
                        "has_more",
                        "object",
                        "url"
                      ],
                      "title": "ApmsSourcesSourceList",
                      "type": "object",
                      "x-expandableFields": [
                        "data"
                      ]
                    }
                  },
                  "required": [
                    "created",
                    "id",
                    "livemode",
                    "object",
                    "sources"
                  ],
                  "title": "Customer",
                  "type": "object",
                  "x-expandableFields": [
                    "default_source",
                    "discount",
                    "invoice_settings",
                    "shipping",
                    "sources",
                    "subscriptions"
                  ],
                  "x-resourceId": "customer"
                }
              ]
            }
          },
          "email": {
            "description": "Email address of the customer placing the order",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "external_reference_id": {
            "type": "string",
            "description": "An ID, such as an invoice or PO number, that is passed to the merchant's gateway and ultimately appears in settlement records. Format supported for US, spaces in between are allowed and including spaces length max to be 12 including alphanumeric characters"
          },
          "id": {
            "description": "Unique ID",
            "maxLength": 5000,
            "type": "string"
          },
          "items": {
            "description": "List of items in the order. An order can have 25 items.",
            "items": {
              "properties": {
                "amount": {
                  "description": "Total amount for the items in the smallest monetary unit of the merchant's currency",
                  "type": "integer",
                  "format": "int64"
                },
                "currency": {
                  "description": "Three-letter ISO 4217 currency code (in lowercase)",
                  "type": "string"
                },
                "description": {
                  "description": "User-facing description of the item (for example, `water bottle` or `candy`). This can also describe non-SKU items such as taxes or shipping methods.",
                  "maxLength": 5000,
                  "type": "string"
                },
                "inventory_id": {
                  "anyOf": [
                    {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    {
                      "properties": {
                        "active": {
                          "description": "Set to `true` if the item can be purchased",
                          "type": "boolean"
                        },
                        "attributes": {
                          "additionalProperties": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                          "type": "object"
                        },
                        "created": {
                          "description": "Creation time of the object (Unix timestamp in milliseconds)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "currency": {
                          "description": "Three-letter ISO 4217 currency code (in lowercase)",
                          "type": "string"
                        },
                        "id": {
                          "description": "Unique object ID",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "image": {
                          "description": "URL of an image for the SKU",
                          "type": "string",
                          "maxLength": 2048,
                          "nullable": true
                        },
                        "livemode": {
                          "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                          "type": "boolean"
                        },
                        "metadata": {
                          "additionalProperties": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                          "type": "object"
                        },
                        "object": {
                          "description": "Object type. Objects with the same type have the same value.",
                          "enum": [
                            "sku"
                          ],
                          "type": "string"
                        },
                        "updated": {
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "active",
                        "attributes",
                        "created",
                        "currency",
                        "id",
                        "livemode",
                        "metadata",
                        "object",
                        "price",
                        "product",
                        "updated"
                      ],
                      "title": "SKU",
                      "type": "object",
                      "x-resourceId": "sku"
                    }
                  ],
                  "description": "UUID of the associated object for the line item. The value is expandable if it is not null.",
                  "nullable": true,
                  "x-expansionResources": {
                    "oneOf": [
                      {
                        "properties": {
                          "active": {
                            "description": "Set to `true` if the item can be purchased",
                            "type": "boolean"
                          },
                          "attributes": {
                            "additionalProperties": {
                              "maxLength": 5000,
                              "type": "string"
                            },
                            "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                            "type": "object"
                          },
                          "created": {
                            "description": "Creation time of the object (Unix timestamp in milliseconds)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "currency": {
                            "description": "Three-letter ISO 4217 currency code (in lowercase)",
                            "type": "string"
                          },
                          "id": {
                            "description": "Unique object ID",
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "image": {
                            "description": "URL of an image for the SKU",
                            "type": "string",
                            "maxLength": 2048,
                            "nullable": true
                          },
                          "livemode": {
                            "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                            "type": "boolean"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "maxLength": 500,
                              "type": "string"
                            },
                            "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                            "type": "object"
                          },
                          "object": {
                            "description": "Object type. Objects with the same type have the same value.",
                            "enum": [
                              "sku"
                            ],
                            "type": "string"
                          },
                          "updated": {
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "active",
                          "attributes",
                          "created",
                          "currency",
                          "id",
                          "livemode",
                          "metadata",
                          "object",
                          "price",
                          "product",
                          "updated"
                        ],
                        "title": "SKU",
                        "type": "object",
                        "x-resourceId": "sku"
                      }
                    ]
                  }
                },
                "object": {
                  "description": "Object type. Objects with the same type have the same value.",
                  "enum": [
                    "order_item"
                  ],
                  "type": "string"
                },
                "parent": {
                  "anyOf": [
                    {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    {
                      "properties": {
                        "active": {
                          "description": "Set to `true` if the item can be purchased",
                          "type": "boolean"
                        },
                        "attributes": {
                          "additionalProperties": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                          "type": "object"
                        },
                        "created": {
                          "description": "Creation time of the object (Unix timestamp in milliseconds)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "currency": {
                          "description": "Three-letter ISO 4217 currency code (in lowercase)",
                          "type": "string"
                        },
                        "id": {
                          "description": "Unique object ID",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "image": {
                          "description": "URL of an image for the SKU",
                          "type": "string",
                          "maxLength": 2048,
                          "nullable": true
                        },
                        "livemode": {
                          "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                          "type": "boolean"
                        },
                        "metadata": {
                          "additionalProperties": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                          "type": "object"
                        },
                        "object": {
                          "description": "Object type. Objects with the same type have the same value.",
                          "enum": [
                            "sku"
                          ],
                          "type": "string"
                        },
                        "updated": {
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "active",
                        "attributes",
                        "created",
                        "currency",
                        "id",
                        "livemode",
                        "metadata",
                        "object",
                        "price",
                        "product",
                        "updated"
                      ],
                      "title": "SKU",
                      "type": "object",
                      "x-resourceId": "sku"
                    }
                  ],
                  "deprecated": true,
                  "description": "DEPRECATED. UUID of the associated object for the line item. The value is expandable if it is not null.",
                  "nullable": true,
                  "x-expansionResources": {
                    "oneOf": [
                      {
                        "properties": {
                          "active": {
                            "description": "Set to `true` if the item can be purchased",
                            "type": "boolean"
                          },
                          "attributes": {
                            "additionalProperties": {
                              "maxLength": 5000,
                              "type": "string"
                            },
                            "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                            "type": "object"
                          },
                          "created": {
                            "description": "Creation time of the object (Unix timestamp in milliseconds)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "currency": {
                            "description": "Three-letter ISO 4217 currency code (in lowercase)",
                            "type": "string"
                          },
                          "id": {
                            "description": "Unique object ID",
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "image": {
                            "description": "URL of an image for the SKU",
                            "type": "string",
                            "maxLength": 2048,
                            "nullable": true
                          },
                          "livemode": {
                            "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                            "type": "boolean"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "maxLength": 500,
                              "type": "string"
                            },
                            "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                            "type": "object"
                          },
                          "object": {
                            "description": "Object type. Objects with the same type have the same value.",
                            "enum": [
                              "sku"
                            ],
                            "type": "string"
                          },
                          "updated": {
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "active",
                          "attributes",
                          "created",
                          "currency",
                          "id",
                          "livemode",
                          "metadata",
                          "object",
                          "price",
                          "product",
                          "updated"
                        ],
                        "title": "SKU",
                        "type": "object",
                        "x-resourceId": "sku"
                      }
                    ]
                  }
                },
                "quantity": {
                  "description": "If the `type` is `sku`, the number of instances of `parent` for the line item",
                  "nullable": true,
                  "type": "integer",
                  "format": "int64"
                },
                "tax_rates": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "title": "Tax as percentage",
                        "description": "A tax rate object defining an item-level tax as a percentage",
                        "properties": {
                          "name": {
                            "type": "string",
                            "maxLength": 5000,
                            "description": "The label for the tax rate"
                          },
                          "rate": {
                            "type": "integer",
                            "description": "Item-specific tax where a 10% rate is defined as `1000000`"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "title": "Tax as amount",
                        "description": "A tax rate object defining a flat item-level tax amount",
                        "properties": {
                          "name": {
                            "type": "string",
                            "maxLength": 5000,
                            "description": "The label for the tax rate"
                          },
                          "tax_amount": {
                            "type": "integer",
                            "description": "Merchant-defined flat tax amount in cents"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "title": "Tax as UUID",
                        "description": "A tax rate object defining an item-level tax as UUID",
                        "properties": {
                          "name": {
                            "type": "string",
                            "maxLength": 5000,
                            "description": "The label for the item-level tax UUID"
                          },
                          "tax_rate_uuid": {
                            "type": "string",
                            "description": "Item-level tax UUID"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": {
                  "description": "Line item type",
                  "enum": [
                    "sku",
                    "shipping"
                  ],
                  "maxLength": 5000,
                  "type": "string"
                }
              },
              "required": [
                "amount",
                "currency",
                "description",
                "object",
                "type"
              ],
              "title": "OrderItem",
              "type": "object",
              "x-expandableFields": [
                "parent"
              ]
            },
            "type": "array"
          },
          "past_charges": {
            "description": "List of past charges on the order",
            "items": {
              "$ref": "#/components/schemas/charge"
            },
            "type": "array"
          },
          "livemode": {
            "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "Object type. Objects with the same type have the same value.",
            "enum": [
              "order"
            ],
            "type": "string"
          },
          "returns": {
            "nullable": true,
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/order_return"
                },
                "type": "array"
              },
              "has_more": {
                "description": "Set to `true` if there is another page of list items after the current page",
                "type": "boolean"
              },
              "object": {
                "description": "Object type set to list. Objects with the same type have the same value.",
                "enum": [
                  "list"
                ],
                "type": "string"
              },
              "url": {
                "description": "URL of the list",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": [
              "data",
              "has_more",
              "object",
              "url"
            ],
            "title": "OrderReturnList",
            "type": "object",
            "x-expandableFields": [
              "data"
            ]
          },
          "selected_shipping_method": {
            "description": "Selected shipping method of the order. If present, the value is set from the `shipping_methods` list. For multiple shipping methods, the first method is automatically selected.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "shipping": {
            "anyOf": [
              {
                "properties": {
                  "address": {
                    "properties": {
                      "city": {
                        "description": "The city, district, suburb, town, or village",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "country": {
                        "description": "Two-letter country code",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "line1": {
                        "description": "First line of the address (includes the street address, PO box, or company name)",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "line2": {
                        "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "postal_code": {
                        "description": "ZIP or postal code",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "state": {
                        "description": "The state, county, province, or region",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "title": "Address",
                    "type": "object",
                    "x-expandableFields": []
                  },
                  "carrier": {
                    "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Product recipient's name",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "phone": {
                    "description": "Product recipient's phone (including extension)",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "tracking_number": {
                    "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "address"
                ],
                "title": "Shipping",
                "type": "object",
                "x-expandableFields": [
                  "address"
                ]
              }
            ],
            "description": "Shipping address of the order",
            "nullable": true
          },
          "shipping_methods": {
            "description": "List of supported shipping methods for the order. The shipping method can be set when paying for the order and updated as needed before the order ships.",
            "items": {
              "properties": {
                "amount": {
                  "description": "Total amount in the smallest monetary unit of the merchant's currency",
                  "type": "integer",
                  "format": "int64"
                },
                "currency": {
                  "description": "Three-letter ISO 4217 currency code (in lowercase)",
                  "type": "string"
                },
                "description": {
                  "description": "Container for user-facing information about the object",
                  "maxLength": 5000,
                  "type": "string"
                },
                "id": {
                  "description": "Unique object ID",
                  "maxLength": 5000,
                  "type": "string"
                }
              },
              "required": [
                "amount",
                "currency",
                "description",
                "id"
              ],
              "title": "ShippingMethod",
              "type": "object",
              "x-expandableFields": [
                "delivery_estimate"
              ]
            },
            "nullable": true,
            "type": "array"
          },
          "source": {
            "title": "Payment source (card)",
            "description": "The payment source charged. This can be a token or an alternate tender.",
            "nullable": true,
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "maxLength": 5000,
                "description": "Unique identifier (Clover token)"
              },
              "object": {
                "type": "string",
                "maxLength": 5000,
                "description": "Type of source (for example, a card or bank account)"
              },
              "address_city": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "City segment of the provided billing address"
              },
              "address_country": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "Country segment of the provided billing address"
              },
              "address_line1": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "First line of the provided billing address. This includes the building number and street name."
              },
              "address_line1_check": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "If an `address_line1` was provided, the result of the verification check (one of `pass`, `failed`, `unavailable`, or `unchecked`)",
                "enum": [
                  "pass",
                  "failed",
                  "unavailable",
                  "unchecked"
                ]
              },
              "address_line2": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "Second line of the provided billing address (the room, suite, or apartment number)"
              },
              "address_state": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "State or province segment of the provided billing address"
              },
              "address_zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "Zip or postal code segment of the provided billing address"
              },
              "address_zip_check": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "If an `address_zip` was provided, the result of the verification check (one of `pass`, `failed`, `unavailable`, or `unchecked`)",
                "enum": [
                  "pass",
                  "failed",
                  "unavailable",
                  "unchecked"
                ]
              },
              "brand": {
                "type": "string",
                "maxLength": 5000,
                "nullable": true,
                "description": "Brand of card presented by the customer"
              },
              "country": {
                "type": "string",
                "maxLength": 5000,
                "nullable": true,
                "description": "Two-letter ISO code for the country where the card was issued"
              },
              "cvc_check": {
                "type": "string",
                "nullable": true,
                "maxLength": 5000,
                "description": "If a card security code was provided, the result of the verification check (one of `pass`, `failed`, `unavailable`, or `unchecked`)",
                "enum": [
                  "pass",
                  "failed",
                  "unavailable",
                  "unchecked"
                ]
              },
              "exp_month": {
                "type": "string",
                "maxLength": 5000,
                "description": "Two-digit number representing the card's expiration month"
              },
              "exp_year": {
                "type": "string",
                "maxLength": 5000,
                "description": "Four-digit number representing the card's expiration year"
              },
              "fingerprint": {
                "type": "string",
                "maxLength": 5000,
                "description": "Unique identifier for this source"
              },
              "first6": {
                "type": "string",
                "maxLength": 5000,
                "description": "First six digits of the card PAN"
              },
              "funding": {
                "type": "string",
                "maxLength": 5000,
                "description": "Type of card funding (one of `credit`, `debit`, `prepaid`, or `unknown`)"
              },
              "last4": {
                "type": "string",
                "maxLength": 5000,
                "description": "Last four digits of the card PAN"
              },
              "name": {
                "type": "string",
                "maxLength": 5000,
                "description": "Cardholder name"
              }
            }
          },
          "status": {
            "description": "Current order status",
            "enum": [
              "created",
              "paid",
              "canceled",
              "fulfilled",
              "returned"
            ],
            "maxLength": 5000,
            "type": "string"
          },
          "status_transitions": {
            "anyOf": [
              {
                "properties": {
                  "canceled": {
                    "format": "int64",
                    "nullable": true,
                    "type": "integer"
                  },
                  "fulfilled": {
                    "format": "int64",
                    "nullable": true,
                    "type": "integer"
                  },
                  "paid": {
                    "format": "int64",
                    "nullable": true,
                    "type": "integer"
                  },
                  "returned": {
                    "format": "int64",
                    "nullable": true,
                    "type": "integer"
                  }
                },
                "title": "StatusTransitions",
                "type": "object",
                "x-expandableFields": []
              }
            ],
            "description": "Timestamps (in milliseconds) for all order status updates",
            "nullable": true
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "id",
          "items",
          "livemode",
          "metadata",
          "object",
          "status"
        ],
        "title": "Order",
        "type": "object",
        "x-expandableFields": [
          "charge",
          "customer",
          "items",
          "returns",
          "shipping",
          "shipping_methods",
          "status_transitions"
        ],
        "x-resourceId": "order"
      },
      "order_item": {
        "properties": {
          "amount": {
            "description": "Total amount for the items in the smallest monetary unit of the merchant's currency",
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "description": "Three-letter ISO 4217 currency code (in lowercase)",
            "type": "string"
          },
          "description": {
            "description": "User-facing description of the item (for example, `water bottle` or `candy`). This can also describe non-SKU items such as taxes or shipping methods.",
            "maxLength": 5000,
            "type": "string"
          },
          "inventory_id": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "properties": {
                  "active": {
                    "description": "Set to `true` if the item can be purchased",
                    "type": "boolean"
                  },
                  "attributes": {
                    "additionalProperties": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                    "type": "object"
                  },
                  "created": {
                    "description": "Creation time of the object (Unix timestamp in milliseconds)",
                    "format": "int64",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "Three-letter ISO 4217 currency code (in lowercase)",
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique object ID",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "image": {
                    "description": "URL of an image for the SKU",
                    "type": "string",
                    "maxLength": 2048,
                    "nullable": true
                  },
                  "livemode": {
                    "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                    "type": "boolean"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "maxLength": 500,
                      "type": "string"
                    },
                    "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "object": {
                    "description": "Object type. Objects with the same type have the same value.",
                    "enum": [
                      "sku"
                    ],
                    "type": "string"
                  },
                  "updated": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "active",
                  "attributes",
                  "created",
                  "currency",
                  "id",
                  "livemode",
                  "metadata",
                  "object",
                  "price",
                  "product",
                  "updated"
                ],
                "title": "SKU",
                "type": "object",
                "x-resourceId": "sku"
              }
            ],
            "description": "UUID of the associated object for the line item. The value is expandable if it is not null.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "properties": {
                    "active": {
                      "description": "Set to `true` if the item can be purchased",
                      "type": "boolean"
                    },
                    "attributes": {
                      "additionalProperties": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                      "type": "object"
                    },
                    "created": {
                      "description": "Creation time of the object (Unix timestamp in milliseconds)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "currency": {
                      "description": "Three-letter ISO 4217 currency code (in lowercase)",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique object ID",
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "image": {
                      "description": "URL of an image for the SKU",
                      "type": "string",
                      "maxLength": 2048,
                      "nullable": true
                    },
                    "livemode": {
                      "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                      "type": "boolean"
                    },
                    "metadata": {
                      "additionalProperties": {
                        "maxLength": 500,
                        "type": "string"
                      },
                      "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                      "type": "object"
                    },
                    "object": {
                      "description": "Object type. Objects with the same type have the same value.",
                      "enum": [
                        "sku"
                      ],
                      "type": "string"
                    },
                    "updated": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "active",
                    "attributes",
                    "created",
                    "currency",
                    "id",
                    "livemode",
                    "metadata",
                    "object",
                    "price",
                    "product",
                    "updated"
                  ],
                  "title": "SKU",
                  "type": "object",
                  "x-resourceId": "sku"
                }
              ]
            }
          },
          "object": {
            "description": "Object type. Objects with the same type have the same value.",
            "enum": [
              "order_item"
            ],
            "type": "string"
          },
          "parent": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "properties": {
                  "active": {
                    "description": "Set to `true` if the item can be purchased",
                    "type": "boolean"
                  },
                  "attributes": {
                    "additionalProperties": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                    "type": "object"
                  },
                  "created": {
                    "description": "Creation time of the object (Unix timestamp in milliseconds)",
                    "format": "int64",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "Three-letter ISO 4217 currency code (in lowercase)",
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique object ID",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "image": {
                    "description": "URL of an image for the SKU",
                    "type": "string",
                    "maxLength": 2048,
                    "nullable": true
                  },
                  "livemode": {
                    "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                    "type": "boolean"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "maxLength": 500,
                      "type": "string"
                    },
                    "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "object": {
                    "description": "Object type. Objects with the same type have the same value.",
                    "enum": [
                      "sku"
                    ],
                    "type": "string"
                  },
                  "updated": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "active",
                  "attributes",
                  "created",
                  "currency",
                  "id",
                  "livemode",
                  "metadata",
                  "object",
                  "price",
                  "product",
                  "updated"
                ],
                "title": "SKU",
                "type": "object",
                "x-resourceId": "sku"
              }
            ],
            "deprecated": true,
            "description": "DEPRECATED. UUID of the associated object for the line item. The value is expandable if it is not null.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "properties": {
                    "active": {
                      "description": "Set to `true` if the item can be purchased",
                      "type": "boolean"
                    },
                    "attributes": {
                      "additionalProperties": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                      "type": "object"
                    },
                    "created": {
                      "description": "Creation time of the object (Unix timestamp in milliseconds)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "currency": {
                      "description": "Three-letter ISO 4217 currency code (in lowercase)",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique object ID",
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "image": {
                      "description": "URL of an image for the SKU",
                      "type": "string",
                      "maxLength": 2048,
                      "nullable": true
                    },
                    "livemode": {
                      "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                      "type": "boolean"
                    },
                    "metadata": {
                      "additionalProperties": {
                        "maxLength": 500,
                        "type": "string"
                      },
                      "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                      "type": "object"
                    },
                    "object": {
                      "description": "Object type. Objects with the same type have the same value.",
                      "enum": [
                        "sku"
                      ],
                      "type": "string"
                    },
                    "updated": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "active",
                    "attributes",
                    "created",
                    "currency",
                    "id",
                    "livemode",
                    "metadata",
                    "object",
                    "price",
                    "product",
                    "updated"
                  ],
                  "title": "SKU",
                  "type": "object",
                  "x-resourceId": "sku"
                }
              ]
            }
          },
          "quantity": {
            "description": "If the `type` is `sku`, the number of instances of `parent` for the line item",
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "tax_rates": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "title": "Tax as percentage",
                  "description": "A tax rate object defining an item-level tax as a percentage",
                  "properties": {
                    "name": {
                      "type": "string",
                      "maxLength": 5000,
                      "description": "The label for the tax rate"
                    },
                    "rate": {
                      "type": "integer",
                      "description": "Item-specific tax where a 10% rate is defined as `1000000`"
                    }
                  },
                  "type": "object"
                },
                {
                  "title": "Tax as amount",
                  "description": "A tax rate object defining a flat item-level tax amount",
                  "properties": {
                    "name": {
                      "type": "string",
                      "maxLength": 5000,
                      "description": "The label for the tax rate"
                    },
                    "tax_amount": {
                      "type": "integer",
                      "description": "Merchant-defined flat tax amount in cents"
                    }
                  },
                  "type": "object"
                },
                {
                  "title": "Tax as UUID",
                  "description": "A tax rate object defining an item-level tax as UUID",
                  "properties": {
                    "name": {
                      "type": "string",
                      "maxLength": 5000,
                      "description": "The label for the item-level tax UUID"
                    },
                    "tax_rate_uuid": {
                      "type": "string",
                      "description": "Item-level tax UUID"
                    }
                  },
                  "type": "object"
                }
              ]
            }
          },
          "type": {
            "description": "Line item type",
            "enum": [
              "sku",
              "shipping"
            ],
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "description",
          "object",
          "type"
        ],
        "title": "OrderItem",
        "type": "object",
        "x-expandableFields": [
          "parent"
        ]
      },
      "sku": {
        "properties": {
          "active": {
            "description": "Set to `true` if the item can be purchased",
            "type": "boolean"
          },
          "attributes": {
            "additionalProperties": {
              "maxLength": 5000,
              "type": "string"
            },
            "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
            "type": "object"
          },
          "created": {
            "description": "Creation time of the object (Unix timestamp in milliseconds)",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter ISO 4217 currency code (in lowercase)",
            "type": "string"
          },
          "id": {
            "description": "Unique object ID",
            "maxLength": 5000,
            "type": "string"
          },
          "image": {
            "description": "URL of an image for the SKU",
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "livemode": {
            "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "Object type. Objects with the same type have the same value.",
            "enum": [
              "sku"
            ],
            "type": "string"
          },
          "updated": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "active",
          "attributes",
          "created",
          "currency",
          "id",
          "livemode",
          "metadata",
          "object",
          "price",
          "product",
          "updated"
        ],
        "title": "SKU",
        "type": "object",
        "x-resourceId": "sku"
      },
      "order_return": {
        "properties": {
          "amount": {
            "description": "Total amount for the return in the smallest monetary unit of the merchant's currency",
            "type": "integer",
            "format": "int64"
          },
          "additional_charges": {
            "description": "Data about any surcharge or other fee applied to a transaction",
            "type": "object",
            "properties": {
              "amount": {
                "description": "The number of cents charged",
                "type": "integer"
              },
              "id": {
                "description": "A unique idendifier of the surcharge",
                "type": "string",
                "minimum": 13,
                "maximum": 13
              },
              "rate": {
                "description": "The percentage of the total assessed as a surcharge or other fee. This value is set when a merchant is boarded to Clover Percentages are defined to four decimal places. For example, the value of a 3.5% surcharge is `35000` (3.5*10000).",
                "type": "integer"
              },
              "type": {
                "description": "A descriptor of the additional charge collected with the payment",
                "type": "string",
                "enum": [
                  "CREDIT_SURCHARGE"
                ]
              }
            }
          },
          "created": {
            "description": "Creation time of the object (Unix timestamp in milliseconds)",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter ISO 4217 currency code (in lowercase)",
            "type": "string"
          },
          "id": {
            "description": "Unique object ID",
            "maxLength": 5000,
            "type": "string"
          },
          "items": {
            "description": "The item or items being returned",
            "items": {
              "properties": {
                "amount": {
                  "description": "Total amount for the items in the smallest monetary unit of the merchant's currency",
                  "type": "integer",
                  "format": "int64"
                },
                "currency": {
                  "description": "Three-letter ISO 4217 currency code (in lowercase)",
                  "type": "string"
                },
                "description": {
                  "description": "User-facing description of the item (for example, `water bottle` or `candy`). This can also describe non-SKU items such as taxes or shipping methods.",
                  "maxLength": 5000,
                  "type": "string"
                },
                "inventory_id": {
                  "anyOf": [
                    {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    {
                      "properties": {
                        "active": {
                          "description": "Set to `true` if the item can be purchased",
                          "type": "boolean"
                        },
                        "attributes": {
                          "additionalProperties": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                          "type": "object"
                        },
                        "created": {
                          "description": "Creation time of the object (Unix timestamp in milliseconds)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "currency": {
                          "description": "Three-letter ISO 4217 currency code (in lowercase)",
                          "type": "string"
                        },
                        "id": {
                          "description": "Unique object ID",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "image": {
                          "description": "URL of an image for the SKU",
                          "type": "string",
                          "maxLength": 2048,
                          "nullable": true
                        },
                        "livemode": {
                          "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                          "type": "boolean"
                        },
                        "metadata": {
                          "additionalProperties": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                          "type": "object"
                        },
                        "object": {
                          "description": "Object type. Objects with the same type have the same value.",
                          "enum": [
                            "sku"
                          ],
                          "type": "string"
                        },
                        "updated": {
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "active",
                        "attributes",
                        "created",
                        "currency",
                        "id",
                        "livemode",
                        "metadata",
                        "object",
                        "price",
                        "product",
                        "updated"
                      ],
                      "title": "SKU",
                      "type": "object",
                      "x-resourceId": "sku"
                    }
                  ],
                  "description": "UUID of the associated object for the line item. The value is expandable if it is not null.",
                  "nullable": true,
                  "x-expansionResources": {
                    "oneOf": [
                      {
                        "properties": {
                          "active": {
                            "description": "Set to `true` if the item can be purchased",
                            "type": "boolean"
                          },
                          "attributes": {
                            "additionalProperties": {
                              "maxLength": 5000,
                              "type": "string"
                            },
                            "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                            "type": "object"
                          },
                          "created": {
                            "description": "Creation time of the object (Unix timestamp in milliseconds)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "currency": {
                            "description": "Three-letter ISO 4217 currency code (in lowercase)",
                            "type": "string"
                          },
                          "id": {
                            "description": "Unique object ID",
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "image": {
                            "description": "URL of an image for the SKU",
                            "type": "string",
                            "maxLength": 2048,
                            "nullable": true
                          },
                          "livemode": {
                            "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                            "type": "boolean"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "maxLength": 500,
                              "type": "string"
                            },
                            "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                            "type": "object"
                          },
                          "object": {
                            "description": "Object type. Objects with the same type have the same value.",
                            "enum": [
                              "sku"
                            ],
                            "type": "string"
                          },
                          "updated": {
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "active",
                          "attributes",
                          "created",
                          "currency",
                          "id",
                          "livemode",
                          "metadata",
                          "object",
                          "price",
                          "product",
                          "updated"
                        ],
                        "title": "SKU",
                        "type": "object",
                        "x-resourceId": "sku"
                      }
                    ]
                  }
                },
                "object": {
                  "description": "Object type. Objects with the same type have the same value.",
                  "enum": [
                    "order_item"
                  ],
                  "type": "string"
                },
                "parent": {
                  "anyOf": [
                    {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    {
                      "properties": {
                        "active": {
                          "description": "Set to `true` if the item can be purchased",
                          "type": "boolean"
                        },
                        "attributes": {
                          "additionalProperties": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                          "type": "object"
                        },
                        "created": {
                          "description": "Creation time of the object (Unix timestamp in milliseconds)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "currency": {
                          "description": "Three-letter ISO 4217 currency code (in lowercase)",
                          "type": "string"
                        },
                        "id": {
                          "description": "Unique object ID",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "image": {
                          "description": "URL of an image for the SKU",
                          "type": "string",
                          "maxLength": 2048,
                          "nullable": true
                        },
                        "livemode": {
                          "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                          "type": "boolean"
                        },
                        "metadata": {
                          "additionalProperties": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                          "type": "object"
                        },
                        "object": {
                          "description": "Object type. Objects with the same type have the same value.",
                          "enum": [
                            "sku"
                          ],
                          "type": "string"
                        },
                        "updated": {
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "active",
                        "attributes",
                        "created",
                        "currency",
                        "id",
                        "livemode",
                        "metadata",
                        "object",
                        "price",
                        "product",
                        "updated"
                      ],
                      "title": "SKU",
                      "type": "object",
                      "x-resourceId": "sku"
                    }
                  ],
                  "deprecated": true,
                  "description": "DEPRECATED. UUID of the associated object for the line item. The value is expandable if it is not null.",
                  "nullable": true,
                  "x-expansionResources": {
                    "oneOf": [
                      {
                        "properties": {
                          "active": {
                            "description": "Set to `true` if the item can be purchased",
                            "type": "boolean"
                          },
                          "attributes": {
                            "additionalProperties": {
                              "maxLength": 5000,
                              "type": "string"
                            },
                            "description": "Set of product key-value pairs associated with and describing the item. This can be used for storing additional information about the item in a structured format. For example, for product attributes such as color and style, a SKU can have the following pairs: `{\"color\": \"fuschia\", \"style\": \"bootcut\"}`.",
                            "type": "object"
                          },
                          "created": {
                            "description": "Creation time of the object (Unix timestamp in milliseconds)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "currency": {
                            "description": "Three-letter ISO 4217 currency code (in lowercase)",
                            "type": "string"
                          },
                          "id": {
                            "description": "Unique object ID",
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "image": {
                            "description": "URL of an image for the SKU",
                            "type": "string",
                            "maxLength": 2048,
                            "nullable": true
                          },
                          "livemode": {
                            "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
                            "type": "boolean"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "maxLength": 500,
                              "type": "string"
                            },
                            "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
                            "type": "object"
                          },
                          "object": {
                            "description": "Object type. Objects with the same type have the same value.",
                            "enum": [
                              "sku"
                            ],
                            "type": "string"
                          },
                          "updated": {
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "active",
                          "attributes",
                          "created",
                          "currency",
                          "id",
                          "livemode",
                          "metadata",
                          "object",
                          "price",
                          "product",
                          "updated"
                        ],
                        "title": "SKU",
                        "type": "object",
                        "x-resourceId": "sku"
                      }
                    ]
                  }
                },
                "quantity": {
                  "description": "If the `type` is `sku`, the number of instances of `parent` for the line item",
                  "nullable": true,
                  "type": "integer",
                  "format": "int64"
                },
                "tax_rates": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "title": "Tax as percentage",
                        "description": "A tax rate object defining an item-level tax as a percentage",
                        "properties": {
                          "name": {
                            "type": "string",
                            "maxLength": 5000,
                            "description": "The label for the tax rate"
                          },
                          "rate": {
                            "type": "integer",
                            "description": "Item-specific tax where a 10% rate is defined as `1000000`"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "title": "Tax as amount",
                        "description": "A tax rate object defining a flat item-level tax amount",
                        "properties": {
                          "name": {
                            "type": "string",
                            "maxLength": 5000,
                            "description": "The label for the tax rate"
                          },
                          "tax_amount": {
                            "type": "integer",
                            "description": "Merchant-defined flat tax amount in cents"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "title": "Tax as UUID",
                        "description": "A tax rate object defining an item-level tax as UUID",
                        "properties": {
                          "name": {
                            "type": "string",
                            "maxLength": 5000,
                            "description": "The label for the item-level tax UUID"
                          },
                          "tax_rate_uuid": {
                            "type": "string",
                            "description": "Item-level tax UUID"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": {
                  "description": "Line item type",
                  "enum": [
                    "sku",
                    "shipping"
                  ],
                  "maxLength": 5000,
                  "type": "string"
                }
              },
              "required": [
                "amount",
                "currency",
                "description",
                "object",
                "type"
              ],
              "title": "OrderItem",
              "type": "object",
              "x-expandableFields": [
                "parent"
              ]
            },
            "type": "array"
          },
          "livemode": {
            "description": "Set to `true` if the object is in production. Set to `false` if the object is in sandbox.",
            "type": "boolean"
          },
          "object": {
            "description": "Object type. Objects with the same type have the same value.",
            "enum": [
              "order_return"
            ],
            "type": "string"
          },
          "order": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/order"
              }
            ],
            "description": "UUID of the order that includes the returned items",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/order"
                }
              ]
            }
          },
          "refund": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/refund"
              }
            ],
            "description": "UUID of the refund issued for the returned items",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/refund"
                }
              ]
            }
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "id",
          "items",
          "livemode",
          "object"
        ],
        "title": "OrderReturn",
        "type": "object",
        "x-expandableFields": [
          "items",
          "order",
          "refund"
        ],
        "x-resourceId": "order_return"
      },
      "refund": {
        "properties": {
          "amount": {
            "description": "Total amount of the refund in the smallest monetary unit of the merchant's currency",
            "type": "integer",
            "format": "int64"
          },
          "additional_charges": {
            "description": "Data about any surcharge or other fee applied to a transaction",
            "type": "object",
            "properties": {
              "amount": {
                "description": "The number of cents charged",
                "type": "integer"
              },
              "id": {
                "description": "A unique idendifier of the surcharge",
                "type": "string",
                "minimum": 13,
                "maximum": 13
              },
              "rate": {
                "description": "The percentage of the total assessed as a surcharge or other fee. This value is set when a merchant is boarded to Clover Percentages are defined to four decimal places. For example, the value of a 3.5% surcharge is `35000` (3.5*10000).",
                "type": "integer"
              },
              "type": {
                "description": "A descriptor of the additional charge collected with the payment",
                "type": "string",
                "enum": [
                  "CREDIT_SURCHARGE"
                ]
              }
            }
          },
          "charge": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "UUID of the charge that was refunded",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "created": {
            "description": "Creation time of the object (Unix timestamp in milliseconds)",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter ISO 4217 currency code (in lowercase)",
            "type": "string"
          },
          "description": {
            "description": "(Only for non-card refunds) Container for user-facing information about the object",
            "maxLength": 5000,
            "type": "string"
          },
          "external_reference_id": {
            "type": "string",
            "description": "An ID, such as an invoice or PO number, that is passed to the merchant's gateway and ultimately appears in settlement records. Format supported for US, spaces in between are allowed and including spaces length max to be 12 including alphanumeric characters"
          },
          "failure_reason": {
            "description": "Explanation of why the refund cannot be performed",
            "enum": [
              "lost_or_stolen_card",
              "expired_or_canceled_card",
              "unknown"
            ],
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique object ID",
            "maxLength": 5000,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "Object type. Objects with the same type have the same value.",
            "enum": [
              "refund"
            ],
            "type": "string"
          },
          "reason": {
            "description": "Reason for the refund",
            "enum": [
              "duplicate",
              "fraudulent",
              "requested_by_customer"
            ],
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "receipt_number": {
            "description": "Transaction number that appears on the receipt emailed for this charge",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "Refund status (for credit card refunds, `succeeded` or `failed`; for other refund types, `pending`, `succeeded`, `failed`, or `canceled`)",
            "enum": [
              "succeeded (card or non-card)",
              "failed (card or non-card)",
              "pending (non-card only)",
              "canceled (non-card only)"
            ],
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "id",
          "metadata",
          "object"
        ],
        "title": "Refund",
        "type": "object",
        "x-expandableFields": [
          "charge"
        ],
        "x-resourceId": "refund"
      },
      "shipping": {
        "properties": {
          "address": {
            "properties": {
              "city": {
                "description": "The city, district, suburb, town, or village",
                "maxLength": 5000,
                "nullable": true,
                "type": "string"
              },
              "country": {
                "description": "Two-letter country code",
                "maxLength": 5000,
                "nullable": true,
                "type": "string"
              },
              "line1": {
                "description": "First line of the address (includes the street address, PO box, or company name)",
                "maxLength": 5000,
                "nullable": true,
                "type": "string"
              },
              "line2": {
                "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                "maxLength": 5000,
                "nullable": true,
                "type": "string"
              },
              "postal_code": {
                "description": "ZIP or postal code",
                "maxLength": 5000,
                "nullable": true,
                "type": "string"
              },
              "state": {
                "description": "The state, county, province, or region",
                "maxLength": 5000,
                "nullable": true,
                "type": "string"
              }
            },
            "title": "Address",
            "type": "object",
            "x-expandableFields": []
          },
          "carrier": {
            "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Product recipient's name",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "phone": {
            "description": "Product recipient's phone (including extension)",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "tracking_number": {
            "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "address"
        ],
        "title": "Shipping",
        "type": "object",
        "x-expandableFields": [
          "address"
        ]
      },
      "shipping_method": {
        "properties": {
          "amount": {
            "description": "Total amount in the smallest monetary unit of the merchant's currency",
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "description": "Three-letter ISO 4217 currency code (in lowercase)",
            "type": "string"
          },
          "description": {
            "description": "Container for user-facing information about the object",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique object ID",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "description",
          "id"
        ],
        "title": "ShippingMethod",
        "type": "object",
        "x-expandableFields": [
          "delivery_estimate"
        ]
      },
      "address": {
        "properties": {
          "city": {
            "description": "The city, district, suburb, town, or village",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Two-letter country code",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "line1": {
            "description": "First line of the address (includes the street address, PO box, or company name)",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "line2": {
            "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "description": "ZIP or postal code",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "The state, county, province, or region",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "Address",
        "type": "object",
        "x-expandableFields": []
      },
      "billing_details": {
        "properties": {
          "address": {
            "anyOf": [
              {
                "properties": {
                  "city": {
                    "description": "The city, district, suburb, town, or village",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "country": {
                    "description": "Two-letter country code",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "line1": {
                    "description": "First line of the address (includes the street address, PO box, or company name)",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "line2": {
                    "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "ZIP or postal code",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "state": {
                    "description": "The state, county, province, or region",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  }
                },
                "title": "Address",
                "type": "object",
                "x-expandableFields": []
              }
            ],
            "description": "Billing address",
            "nullable": true
          },
          "email": {
            "description": "Email address",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Full name",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "phone": {
            "description": "Billing phone number (including extension)",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "billing_details",
        "type": "object",
        "x-expandableFields": [
          "address"
        ]
      },
      "customer": {
        "properties": {
          "created": {
            "description": "Creation time of the object (Unix timestamp in milliseconds)",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter ISO 4217 currency code (in lowercase)",
            "type": "string"
          },
          "default_source": {
            "description": "UUID of the customer's default payment `source`",
            "nullable": true,
            "type": "string"
          },
          "delinquent": {
            "description": "For an invoice charged automatically, `delinquent` is `true` if the invoice's charge fails. For an invoice that is sent to the customer, `delinquent` is `true` if the invoice is not paid by its due date.",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "Container for user-facing information about the object",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "email": {
            "description": "Customer email address",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique ID",
            "maxLength": 5000,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs used for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "Object type. Objects with the same type have the same value.",
            "enum": [
              "customer"
            ],
            "type": "string"
          },
          "shipping": {
            "anyOf": [
              {
                "properties": {
                  "address": {
                    "properties": {
                      "city": {
                        "description": "The city, district, suburb, town, or village",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "country": {
                        "description": "Two-letter country code",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "line1": {
                        "description": "First line of the address (includes the street address, PO box, or company name)",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "line2": {
                        "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "postal_code": {
                        "description": "ZIP or postal code",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      },
                      "state": {
                        "description": "The state, county, province, or region",
                        "maxLength": 5000,
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "title": "Address",
                    "type": "object",
                    "x-expandableFields": []
                  },
                  "carrier": {
                    "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Product recipient's name",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "phone": {
                    "description": "Product recipient's phone (including extension)",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  },
                  "tracking_number": {
                    "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
                    "maxLength": 5000,
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "address"
                ],
                "title": "Shipping",
                "type": "object",
                "x-expandableFields": [
                  "address"
                ]
              }
            ],
            "description": "Customer mailing and shipping address. This information appears on invoices emailed to the customer.",
            "nullable": true
          },
          "sources": {
            "description": "Customer's payment `source`s if available",
            "properties": {
              "data": {
                "description": "List of customer payment `source`s",
                "items": {
                  "maxLength": 5000,
                  "type": "string"
                },
                "type": "array"
              },
              "has_more": {
                "description": "Set to `true` if there is another page of list items after the current page",
                "type": "boolean"
              },
              "object": {
                "description": "Object type, set to list. Objects with the same type have the same value.",
                "enum": [
                  "list"
                ],
                "type": "string"
              },
              "url": {
                "description": "URL of the list of sources",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": [
              "data",
              "has_more",
              "object",
              "url"
            ],
            "title": "ApmsSourcesSourceList",
            "type": "object",
            "x-expandableFields": [
              "data"
            ]
          }
        },
        "required": [
          "created",
          "id",
          "livemode",
          "object",
          "sources"
        ],
        "title": "Customer",
        "type": "object",
        "x-expandableFields": [
          "default_source",
          "discount",
          "invoice_settings",
          "shipping",
          "sources",
          "subscriptions"
        ],
        "x-resourceId": "customer"
      },
      "status_transitions": {
        "properties": {
          "canceled": {
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "fulfilled": {
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "paid": {
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "returned": {
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "title": "StatusTransitions",
        "type": "object",
        "x-expandableFields": []
      },
      "tax_rates_rate": {
        "title": "Tax as percentage",
        "description": "A tax rate object defining an item-level tax as a percentage",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 5000,
            "description": "The label for the tax rate"
          },
          "rate": {
            "type": "integer",
            "description": "Item-specific tax where a 10% rate is defined as `1000000`"
          }
        },
        "type": "object"
      },
      "tax_rates_amount": {
        "title": "Tax as amount",
        "description": "A tax rate object defining a flat item-level tax amount",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 5000,
            "description": "The label for the tax rate"
          },
          "tax_amount": {
            "type": "integer",
            "description": "Merchant-defined flat tax amount in cents"
          }
        },
        "type": "object"
      },
      "tax_rates_uuid": {
        "title": "Tax as UUID",
        "description": "A tax rate object defining an item-level tax as UUID",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 5000,
            "description": "The label for the item-level tax UUID"
          },
          "tax_rate_uuid": {
            "type": "string",
            "description": "Item-level tax UUID"
          }
        },
        "type": "object"
      },
      "source": {
        "title": "Payment source (card)",
        "description": "The payment source charged. This can be a token or an alternate tender.",
        "nullable": true,
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 5000,
            "description": "Unique identifier (Clover token)"
          },
          "object": {
            "type": "string",
            "maxLength": 5000,
            "description": "Type of source (for example, a card or bank account)"
          },
          "address_city": {
            "type": "string",
            "nullable": true,
            "maxLength": 5000,
            "description": "City segment of the provided billing address"
          },
          "address_country": {
            "type": "string",
            "nullable": true,
            "maxLength": 5000,
            "description": "Country segment of the provided billing address"
          },
          "address_line1": {
            "type": "string",
            "nullable": true,
            "maxLength": 5000,
            "description": "First line of the provided billing address. This includes the building number and street name."
          },
          "address_line1_check": {
            "type": "string",
            "nullable": true,
            "maxLength": 5000,
            "description": "If an `address_line1` was provided, the result of the verification check (one of `pass`, `failed`, `unavailable`, or `unchecked`)",
            "enum": [
              "pass",
              "failed",
              "unavailable",
              "unchecked"
            ]
          },
          "address_line2": {
            "type": "string",
            "nullable": true,
            "maxLength": 5000,
            "description": "Second line of the provided billing address (the room, suite, or apartment number)"
          },
          "address_state": {
            "type": "string",
            "nullable": true,
            "maxLength": 5000,
            "description": "State or province segment of the provided billing address"
          },
          "address_zip": {
            "type": "string",
            "nullable": true,
            "maxLength": 5000,
            "description": "Zip or postal code segment of the provided billing address"
          },
          "address_zip_check": {
            "type": "string",
            "nullable": true,
            "maxLength": 5000,
            "description": "If an `address_zip` was provided, the result of the verification check (one of `pass`, `failed`, `unavailable`, or `unchecked`)",
            "enum": [
              "pass",
              "failed",
              "unavailable",
              "unchecked"
            ]
          },
          "brand": {
            "type": "string",
            "maxLength": 5000,
            "nullable": true,
            "description": "Brand of card presented by the customer"
          },
          "country": {
            "type": "string",
            "maxLength": 5000,
            "nullable": true,
            "description": "Two-letter ISO code for the country where the card was issued"
          },
          "cvc_check": {
            "type": "string",
            "nullable": true,
            "maxLength": 5000,
            "description": "If a card security code was provided, the result of the verification check (one of `pass`, `failed`, `unavailable`, or `unchecked`)",
            "enum": [
              "pass",
              "failed",
              "unavailable",
              "unchecked"
            ]
          },
          "exp_month": {
            "type": "string",
            "maxLength": 5000,
            "description": "Two-digit number representing the card's expiration month"
          },
          "exp_year": {
            "type": "string",
            "maxLength": 5000,
            "description": "Four-digit number representing the card's expiration year"
          },
          "fingerprint": {
            "type": "string",
            "maxLength": 5000,
            "description": "Unique identifier for this source"
          },
          "first6": {
            "type": "string",
            "maxLength": 5000,
            "description": "First six digits of the card PAN"
          },
          "funding": {
            "type": "string",
            "maxLength": 5000,
            "description": "Type of card funding (one of `credit`, `debit`, `prepaid`, or `unknown`)"
          },
          "last4": {
            "type": "string",
            "maxLength": 5000,
            "description": "Last four digits of the card PAN"
          },
          "name": {
            "type": "string",
            "maxLength": 5000,
            "description": "Cardholder name"
          }
        }
      },
      "range_query_specs": {
        "description": "Filters the results based on an open- or closed-ended date-time range. Each filter part requires the parameter name, such as `created` or `status_transitions`, a comparison operator (`gt`, `gte`, `lt`, or `lte`), and a [`date-time`](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) or Unix timestamp (in milliseconds). The query string uses one of the following formats: `{parameterName}.{comparisonOperator}=YYYY-MM-DDThhmmss` or `{parameterName}.{comparisonOperator}={timestamp}`. For example, to filter the results for objects created after January 12, 2021 but before January 15 at 3 PM, add the following to the request: `created.gt=2021-01-12&created.lte=2021-01-15T150000`.",
        "anyOf": [
          {
            "properties": {
              "gt": {
                "type": "string",
                "format": "date-time",
                "description": "Retrieve results where the created field is greater than the current value"
              },
              "gte": {
                "type": "string",
                "format": "date-time",
                "description": "Retrieve results where the created field is greater than or equal to the current value"
              },
              "lt": {
                "type": "string",
                "format": "date-time",
                "description": "Retrieve results where the created field is less than the current value"
              },
              "lte": {
                "type": "string",
                "format": "date-time",
                "description": "Retrieve results where the created field is less than or equal to the current value"
              }
            }
          }
        ]
      },
      "additional_charges": {
        "description": "Data about any surcharge or other fee applied to a transaction",
        "type": "object",
        "properties": {
          "amount": {
            "description": "The number of cents charged",
            "type": "integer"
          },
          "id": {
            "description": "A unique idendifier of the surcharge",
            "type": "string",
            "minimum": 13,
            "maximum": 13
          },
          "rate": {
            "description": "The percentage of the total assessed as a surcharge or other fee. This value is set when a merchant is boarded to Clover Percentages are defined to four decimal places. For example, the value of a 3.5% surcharge is `35000` (3.5*10000).",
            "type": "integer"
          },
          "type": {
            "description": "A descriptor of the additional charge collected with the payment",
            "type": "string",
            "enum": [
              "CREDIT_SURCHARGE"
            ]
          }
        }
      }
    },
    "examples": {
      "RefundExample": {
        "description": "Refund example",
        "value": {
          "id": "re_1039VV2eZvKYlo2CadhQUrEZ,",
          "object": "refund,",
          "amount": "100,",
          "charge": "ch_1036sv2eZvKYlo2CnBcJSUV8,",
          "created": "1387481419000,",
          "currency": "usd,",
          "reason": "null,",
          "receipt_number": "null,",
          "status": "succeeded"
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://sandbox.dev.clover.com/oauth/authorize",
            "tokenUrl": "https://sandbox.dev.clover.com/oauth/token"
          }
        }
      }
    }
  },
  "openapi": "3.0.0",
  "info": {
    "title": "Ecommerce Service API",
    "description": "REST API providing card-not-present transaction functions for Clover merchants and developers",
    "version": "1.0.0"
  },
  "servers": [
    {
      "description": "Sandbox API server",
      "url": "https://scl-sandbox.dev.clover.com"
    }
  ],
  "security": [
    {
      "OAuth2": []
    }
  ],
  "paths": {
    "/v1/charges": {
      "post": {
        "tags": [
          "CHARGES"
        ],
        "operationId": "CreateCharge",
        "summary": "Create a charge",
        "x-clover-handler": "com.clover.scl.handlers.charges.CreateChargeHandler",
        "x-clover-is-public": true,
        "description": "Charges a credit card or other payment source using the data in the provided `charge` object",
        "requestBody": {
          "description": "Charges a credit card or other payment source using the data in the provided `charge` object.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "description": "Charge amount in cents. If the charge request includes tax (`tax_rate_uuid` or `tax_amount`), this value must be the sum of any item prices and any tax or tip. For example, if the item cost = $10 and the tax is $1, the amount is 1100 cents ($11). Format: Cents"
                  },
                  "currency": {
                    "type": "string",
                    "description": "[Three-letter ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html). Format: Lower case. Length: Max 3"
                  },
                  "capture": {
                    "type": "boolean",
                    "description": "Indicates if the charge is to be captured immediately. Values: True - Default. False - Indicates the charge transaction type is AUTH (or PRE-AUTH), and the charge can be captured later using the /v1/charges/{id}/capture endpoint."
                  },
                  "partial_redemption": {
                    "type": "boolean",
                    "description": "Indicates if the charge can be authorized for a lesser amount.  Values: True False - Default"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Text describing the charge. This information is often displayed to users."
                  },
                  "ecomind": {
                    "type": "string",
                    "description": "Indicates who entered the card data used for a charge - customer (ecom) or merchant (moto).",
                    "default": "ecom",
                    "enum": [
                      "ecom",
                      "moto"
                    ]
                  },
                  "external_reference_id": {
                    "type": "string",
                    "description": "Identifier (ID), such as an invoice or purchase order (PO) number, that is passed to the merchant's gateway and displayed in settlement records. Format: supported for US - Spaces in between are allowed Length: Max 12, including spaces and alphanumeric characters"
                  },
                  "receipt_email": {
                    "type": "string",
                    "description": "Email address to the charge reciept is sent. receipt is sent only after the charge is paid. Note - Receipts are not sent in the sandbox environment."
                  },
                  "soft_descriptor": {
                    "description": "Soft descriptor information for a transaction. This information displays on the customer's card statement in place of the merchant's business information on record.\n",
                    "properties": {
                      "dba_name": {
                        "type": "string",
                        "maxLength": 38,
                        "description": "Merchant doing business as (DBA) name, product, or service. \nLength: Max 38 alphanumeric characters\n"
                      },
                      "street": {
                        "type": "string",
                        "description": "Merchant's street address."
                      },
                      "city": {
                        "type": "string",
                        "description": "Merchant's city."
                      },
                      "region": {
                        "type": "string",
                        "maxLength": 2,
                        "description": "Merchant's state. Format: as a two-character postal abbreviation (US only).\n"
                      },
                      "postal_code": {
                        "type": "string",
                        "description": "Merchant's postal code."
                      },
                      "country_code": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 3,
                        "description": "Merchant's country code.\nFormat: 3-digit code; see the [Country code reference](https://docs.clover.com/docs/country-code-reference).\n"
                      },
                      "merchant_contact_info": {
                        "type": "string",
                        "description": "Merchant's phone number or email address. Format: Max 13 characters for Discover and Visa transactions."
                      }
                    }
                  },
                  "source": {
                    "type": "string",
                    "description": "Payment source to charge, such as `token` or `alternate_tender`."
                  },
                  "stored_credentials": {
                    "description": "Stored credentials for a transaction. For subsequent payments with a saved card, stored credentials are available only with multi-pay (mTokens) tokens. [See Saving a card for future transactions](https://docs.clover.com/docs/ecommerce-saving-card) for more information.",
                    "properties": {
                      "sequence": {
                        "enum": [
                          "FIRST",
                          "SUBSEQUENT"
                        ],
                        "type": "string",
                        "description": "Indicates sequence of the transaction for the same payment card.\n Values:\n First\n Subsequent - Mastercard only supports Subsequent"
                      },
                      "is_scheduled": {
                        "type": "boolean",
                        "description": "Indicates if the transaction is scheduled or part of an installment.\n Values:\n True - Transaction is scheduled.\n False - Transaction is part of an installment. Installments are only available in the US."
                      },
                      "initiator": {
                        "enum": [
                          "MERCHANT",
                          "CARDHOLDER"
                        ],
                        "type": "string",
                        "description": "Indicates with whose consent the transaction is initiated.\n Values:\n Cardholder\n Merchant"
                      },
                      "installment_info": {
                        "description": "Installment information for the transaction.",
                        "properties": {
                          "bill_pay_indicator": {
                            "enum": [
                              "Recurring",
                              "Installment"
                            ],
                            "type": "string",
                            "description": "Indicates if the transaction is a recurring or installment payment. \n Values:\n Installment\n Recurring - For Canadian merchants, the value must be Recurring."
                          },
                          "invoice_number": {
                            "type": "string",
                            "description": "Invoice number of the installment or recurring transaction."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the installment or recurring transaction."
                          }
                        }
                      }
                    }
                  },
                  "level2": {
                    "description": "Additional data for purchase card transactions (US only).",
                    "properties": {
                      "tax_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Part of the transaction amount that indicates the sales tax. A pc_order_number is required when including a `tax_amount`."
                      },
                      "tax_indicator": {
                        "type": "integer",
                        "description": "Taxable status of the transaction. Values: 0 – No tax information provided 1 – Tax amount is provided 2 – Purchase item is tax exempt or non-taxable",
                        "enum": [
                          0,
                          1,
                          2
                        ]
                      },
                      "purchase_identifier": {
                        "type": "string",
                        "description": "Identifier, such as stock keeping unit (SKU), code or reference number that the merchant or customer uses to identify the purchase."
                      },
                      "pc_order_number": {
                        "type": "string",
                        "description": "Order number or customer reference number reported as part of the purchase card data."
                      },
                      "discount_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Discount amount for the transaction. Format: Cents"
                      },
                      "freight_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Freight amount included for the transaction. Format: Cents"
                      },
                      "duty_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Duty amount included for the transaction. Format: Cents"
                      },
                      "destination_postal_code": {
                        "type": "string",
                        "description": "Postal or ZIP code of the delivery location."
                      },
                      "ship_from_postal_code": {
                        "type": "string",
                        "description": "Postal or ZIP code of the shipping location."
                      },
                      "destination_country_code": {
                        "type": "integer",
                        "description": "Delivery location country code.\nFormat: 3-digit code; see the [Country code reference](https://docs.clover.com/docs/country-code-reference)."
                      },
                      "merchant_tax_id": {
                        "type": "string",
                        "description": "Only for Mastercard. Identifier (ID) for the tax collected by the merchant for the transaction."
                      },
                      "product_description": {
                        "type": "string",
                        "description": "Description of the purchased item."
                      }
                    }
                  },
                  "level3": {
                    "description": "Additional data for purchase card level3 transactions (US only). Supported for Mastercard and Visa only. Purchase card level2 is mandatory for level3 transactions.",
                    "properties": {
                      "service_code": {
                        "type": "string",
                        "maxLength": 3,
                        "description": "Required for all non-keyed transactions and swiped transactions. Service code extracted from the track data."
                      },
                      "magnetic_Stripe_Ind": {
                        "type": "boolean",
                        "description": "Value of true indicates a magnetic stripe swiped transaction.\n Values:\n True\n False"
                      },
                      "level3_line_items": {
                        "description": "List of level3 line items.",
                        "items": {
                          "description": "List of level3 line items.",
                          "properties": {
                            "item_description": {
                              "type": "string",
                              "maxLength": 35,
                              "description": "Merchandise description; required for reduced interchange.\n Required for Mastercard.\n Format:\n For Mastercard, level 3 must not be all 0s (zeros) or all high/low values.\n For Visa, level 3 must not be all spaces or all 0s (zeros).\n Length: Max 35 characters"
                            },
                            "product_code": {
                              "type": "string",
                              "maxLength": 12,
                              "description": "Required for Mastercard and Visa. Product or Universal Product Code (UPC). Format: Must not be all spaces"
                            },
                            "unit_cost": {
                              "type": "integer",
                              "format": "int64",
                              "maxLength": 13,
                              "description": "Unit cost of level3 line item. Format: For Visa must not be all spaces or 0s (zeros)"
                            },
                            "quantity": {
                              "type": "number",
                              "format": "decimal",
                              "description": "Item quantity information; required for reduced interchange.\nFormat: Must not be all spaces or 0s (zeros); Last 4 digits are considered decimal places, example: 20.0000"
                            },
                            "discount_amount": {
                              "type": "integer",
                              "format": "int64",
                              "maxLength": 13,
                              "description": "Discount amount applied to the level3 line item.\nFormat: For Visa level2 must not be all 0s (zeros), if a discount exists"
                            },
                            "unit_of_measure": {
                              "type": "string",
                              "maxLength": 12,
                              "description": "Unit of measurement codes used for international trade. Required for reduced interchange for both Mastercard and Visa. See [Unit of Measurement codes](https://docs.clover.com/docs/units-of-measurement-codes)."
                            },
                            "commodity_code": {
                              "type": "string",
                              "maxLength": 12,
                              "description": "Indicates classification of purchased items. Required for Visa."
                            }
                          },
                          "required": [
                            "item_description",
                            "quantity",
                            "unit_of_measure",
                            "product_code",
                            "unit_cost"
                          ]
                        },
                        "type": "array"
                      }
                    }
                  },
                  "tax_rate_uuid": {
                    "type": "string",
                    "minimum": 0,
                    "description": "Tax rate universally unique identifiers (UUID). Use the [Get all tax rates endpoint](https://docs.clover.com/reference/taxrategettaxrates) to retrieve merchant tax UUID information. The tax is not automatically added to the total amount. Your app must ensure the Amount property is the total final amount to charge the customer.    "
                  },
                  "tax_amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "description": "Amount paid in taxes. This value is not automatically added to the total amount. Your app must ensure the Amount property is the total final amount to charge the customer."
                  },
                  "tip_amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "description": "Amount paid in tips. This value is automatically added to the total amount when the transaction is finalized."
                  },
                  "tender": {
                    "description": "Custom tender to charge or pay for the order, for example: cash or check.",
                    "properties": {
                      "label_key": {
                        "enum": [
                          "com.clover.tender.cash",
                          "com.clover.tender.check"
                        ],
                        "type": "string",
                        "description": "Cash and check system tenders."
                      },
                      "label": {
                        "type": "string",
                        "description": "Name of the custom merchant tender."
                      },
                      "id": {
                        "type": "string",
                        "description": "Universally unique identifier (UUID) of the custom merchant tender."
                      }
                    }
                  }
                },
                "required": [
                  "amount",
                  "currency",
                  "source"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The charge was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/charge"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CHARGES"
        ],
        "description": "Returns a list of existing charges. The newest charge is first in the list.",
        "operationId": "GetCharges",
        "summary": "Get charges",
        "x-clover-handler": "com.clover.scl.handlers.charges.ListChargesHandler",
        "x-clover-is-public": true,
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "description": "Filters the results based on an open- or closed-ended date-time range. Each filter part requires the parameter name, such as `created` or `status_transitions`, a comparison operator (`gt`, `gte`, `lt`, or `lte`), and a [`date-time`](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) or Unix timestamp (in milliseconds). The query string uses one of the following formats: `{parameterName}.{comparisonOperator}=YYYY-MM-DDThhmmss` or `{parameterName}.{comparisonOperator}={timestamp}`. For example, to filter the results for objects created after January 12, 2021 but before January 15 at 3 PM, add the following to the request: `created.gt=2021-01-12&created.lte=2021-01-15T150000`.",
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is greater than the current value"
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is greater than or equal to the current value"
                    },
                    "lt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is less than the current value"
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is less than or equal to the current value"
                    }
                  }
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Returns charges associated with the provided customer ID.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Cursor used in pagination. The ending_before object ID sets your place in the list. For example, if you receive 100 objects in a list starting with obj_bar, add ending_before=obj_bar in your subsequent request to retrieve the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specify fields in the response for expansion",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The number of objects returned by the request, ranging between `1` and `100`. The default value is `10`.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Cursor used in pagination. The starting_after object ID sets your place in the list. For example, if you receive 100 objects in a list starting with obj_foo, add starting_after=obj_foo in your subsequent request to retrieve the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/charge"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "Set to `true` if there is another page of list items after the current page",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "Object type, set to list. Objects with the same type have the same value.",
                      "enum": [
                        "list"
                      ],
                      "type": "string"
                    },
                    "url": {
                      "description": "URL of the list",
                      "maxLength": 5000,
                      "pattern": "^/v1/charges",
                      "type": "string"
                    }
                  },
                  "required": [
                    "data",
                    "has_more",
                    "object",
                    "url"
                  ],
                  "type": "object",
                  "x-expandableFields": [
                    "data"
                  ]
                }
              }
            },
            "description": "Successful response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error response"
          }
        }
      }
    },
    "/v1/public_charges": {},
    "/scl/v1/charges": {},
    "/v1/charges/{chargeId}": {
      "get": {
        "tags": [
          "CHARGES"
        ],
        "summary": "Get a charge",
        "description": "Returns the details of an existing charge. This data is also returned when a charge is first created or if it is refunded.",
        "operationId": "GetChargesCharge",
        "x-clover-handler": "com.clover.scl.handlers.charges.GetChargeHandler",
        "x-clover-is-public": true,
        "parameters": [
          {
            "description": "UUID of the charge",
            "in": "path",
            "name": "chargeId",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            }
          },
          {
            "description": "Specify fields in the response for expansion",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/charge"
                }
              }
            },
            "description": "Successful response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error response"
          }
        }
      }
    },
    "/v1/customers": {
      "post": {
        "tags": [
          "CUSTOMERS"
        ],
        "operationId": "CreateCustomer",
        "summary": "Create a customer",
        "x-clover-handler": "com.clover.scl.handlers.customers.CreateCustomerHandler",
        "x-clover-is-public": true,
        "description": "Creates a card-on-file customer record. If you do not want to save card data for the customer, use the `v3/merchants/{mId}/customers` endpoint instead.",
        "requestBody": {
          "description": "An object describing a new customer account for the merchant",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ecomind": {
                    "type": "string",
                    "description": "Indicates whether the card data used for a charge was entered by the customer (`ecom`) or merchant (`moto`).",
                    "default": "ecom",
                    "enum": [
                      "ecom",
                      "moto"
                    ]
                  },
                  "email": {
                    "type": "string",
                    "description": "Customer email address"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "First (given) name of the customer"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name (surname) of the customer"
                  },
                  "name": {
                    "type": "string",
                    "description": "Full name of the customer"
                  },
                  "source": {
                    "type": "string",
                    "description": "The tokenized card (cToken) which is saved as a card on file for future transactions"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Phone number of the customer"
                  },
                  "shipping": {
                    "anyOf": [
                      {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "description": "The city, district, suburb, town, or village",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "country": {
                                "description": "Two-letter country code",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "line1": {
                                "description": "First line of the address (includes the street address, PO box, or company name)",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "line2": {
                                "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "ZIP or postal code",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "state": {
                                "description": "The state, county, province, or region",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              }
                            },
                            "title": "Address",
                            "type": "object",
                            "x-expandableFields": []
                          },
                          "carrier": {
                            "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Product recipient's name",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "phone": {
                            "description": "Product recipient's phone (including extension)",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "tracking_number": {
                            "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "address"
                        ],
                        "title": "Shipping",
                        "type": "object",
                        "x-expandableFields": [
                          "address"
                        ]
                      }
                    ],
                    "description": "Shipping information for the customer",
                    "nullable": true
                  }
                },
                "required": [
                  "email",
                  "source"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The customer was successfully created",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/scl/v1/customers": {},
    "/v1/customers/{customerId}/sources/{cardId}": {
      "delete": {
        "tags": [
          "CUSTOMERS"
        ],
        "operationId": "RevokeCard",
        "summary": "Revoke a card",
        "x-clover-handler": "com.clover.scl.handlers.customers.RevokeCardHandler",
        "x-clover-is-public": true,
        "description": "Removes a `source` from the customer profile",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique customer ID"
          },
          {
            "in": "path",
            "name": "cardId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "UUID of the card to revoke"
          }
        ],
        "responses": {
          "200": {
            "description": "The card was successfully removed"
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/scl/v1/customers/{customerId}/sources/{cardId}": {},
    "/v1/customers/{customerId}": {
      "put": {
        "tags": [
          "CUSTOMERS"
        ],
        "operationId": "UpdateCustomer",
        "summary": "Update a customer",
        "x-clover-handler": "com.clover.scl.handlers.customers.UpdateCustomerHandler",
        "x-clover-is-public": true,
        "description": "Update an existing customer profile, including a card associated with the customer",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique customer ID"
          }
        ],
        "requestBody": {
          "description": "An object describing a new customer account for the merchant",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ecomind": {
                    "type": "string",
                    "description": "Indicates whether the card data used for a charge was entered by the customer (`ecom`) or merchant (`moto`).",
                    "default": "ecom",
                    "enum": [
                      "ecom",
                      "moto"
                    ]
                  },
                  "email": {
                    "type": "string",
                    "description": "Customer email address"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "First (given) name of the customer"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name (surname) of the customer"
                  },
                  "name": {
                    "type": "string",
                    "description": "Full name of the customer"
                  },
                  "source": {
                    "type": "string",
                    "description": "The tokenized card (cToken) which is saved as a card on file for future transactions"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Phone number of the customer"
                  },
                  "shipping": {
                    "anyOf": [
                      {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "description": "The city, district, suburb, town, or village",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "country": {
                                "description": "Two-letter country code",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "line1": {
                                "description": "First line of the address (includes the street address, PO box, or company name)",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "line2": {
                                "description": "Second line of the address (includes the apartment, suite, unit, or building number)",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "ZIP or postal code",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              },
                              "state": {
                                "description": "The state, county, province, or region",
                                "maxLength": 5000,
                                "nullable": true,
                                "type": "string"
                              }
                            },
                            "title": "Address",
                            "type": "object",
                            "x-expandableFields": []
                          },
                          "carrier": {
                            "description": "Delivery service used to ship the physical product (DHL, Fedex, US Postal Service, etc.)",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Product recipient's name",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "phone": {
                            "description": "Product recipient's phone (including extension)",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          },
                          "tracking_number": {
                            "description": "Shipment number provided by the `carrier`. Use a comma-separated list for multiple tracking numbers.",
                            "maxLength": 5000,
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "address"
                        ],
                        "title": "Shipping",
                        "type": "object",
                        "x-expandableFields": [
                          "address"
                        ]
                      }
                    ],
                    "description": "Shipping information for the customer",
                    "nullable": true
                  }
                },
                "required": [
                  "email",
                  "source"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The customer data was successfully updated",
            "content": {
              "application/json": {}
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/scl/v1/customers/{customerId}": {},
    "/v1/refunds": {
      "post": {
        "tags": [
          "REFUNDS"
        ],
        "operationId": "CreateRefund",
        "summary": "Create a refund",
        "x-clover-handler": "com.clover.scl.handlers.refunds.CreateRefundHandler",
        "x-clover-is-public": true,
        "description": "A new refund must be associated with an existing charge. Refunds are applied to the `source` used for the original payment. Partial refunds can be performed up to the original charge amount.",
        "requestBody": {
          "description": "An object describing a refund to be applied",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "charge": {
                    "type": "string",
                    "description": "Unique ID of the charge to refund"
                  },
                  "amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 1,
                    "description": "Refund amount in cents. You can only refund the remaining, unrefunded amount of the charge."
                  },
                  "external_reference_id": {
                    "type": "string",
                    "description": "An ID, such as an invoice or PO number, that is passed to the merchant's gateway and ultimately appears in settlement records. Format supported for US, spaces in between are allowed and including spaces length max to be 12 including alphanumeric characters."
                  },
                  "reason": {
                    "type": "string",
                    "description": "User-selected explanation for the refund",
                    "enum": [
                      "duplicate",
                      "fraudulent",
                      "requested_by_customer"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The refund processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refund"
                },
                "examples": {
                  "refundExample": {
                    "description": "Refund example",
                    "value": {
                      "id": "re_1039VV2eZvKYlo2CadhQUrEZ,",
                      "object": "refund,",
                      "amount": "100,",
                      "charge": "ch_1036sv2eZvKYlo2CnBcJSUV8,",
                      "created": "1387481419000,",
                      "currency": "usd,",
                      "reason": "null,",
                      "receipt_number": "null,",
                      "status": "succeeded"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "REFUNDS"
        ],
        "operationId": "ListRefunds",
        "summary": "Get refunds list",
        "x-clover-handler": "com.clover.scl.handlers.refunds.ListRefundsHandler",
        "x-clover-is-public": true,
        "description": "Returns a list of all existing refunds. The newest refund is first in the list. The ten most recent refunds appear by default on the `charge` object.",
        "parameters": [
          {
            "in": "query",
            "name": "charge",
            "schema": {
              "type": "string"
            },
            "description": "Retrieve refunds applied to a specific charge"
          },
          {
            "in": "query",
            "name": "created",
            "required": false,
            "description": "List filter based on the object's `created` field. The value can be a string with a Unix timestamp (in milliseconds) or a dictionary of multiple options describing a time range.",
            "explode": true,
            "schema": {
              "description": "Filters the results based on an open- or closed-ended date-time range. Each filter part requires the parameter name, such as `created` or `status_transitions`, a comparison operator (`gt`, `gte`, `lt`, or `lte`), and a [`date-time`](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) or Unix timestamp (in milliseconds). The query string uses one of the following formats: `{parameterName}.{comparisonOperator}=YYYY-MM-DDThhmmss` or `{parameterName}.{comparisonOperator}={timestamp}`. For example, to filter the results for objects created after January 12, 2021 but before January 15 at 3 PM, add the following to the request: `created.gt=2021-01-12&created.lte=2021-01-15T150000`.",
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is greater than the current value"
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is greater than or equal to the current value"
                    },
                    "lt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is less than the current value"
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is less than or equal to the current value"
                    }
                  }
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "in": "query",
            "name": "ending_before",
            "schema": {
              "type": "string"
            },
            "description": "Cursor used in pagination. The ending_before object ID sets your place in the list. For example, if you receive 100 objects in a list starting with obj_bar, add ending_before=obj_bar in your subsequent request to retrieve the previous page of the list."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The number of objects returned by the request, ranging between `1` and `100`. The default value is `10`."
          },
          {
            "in": "query",
            "name": "starting_after",
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "description": "Cursor used in pagination. The starting_after object ID sets your place in the list. For example, if you receive 100 objects in a list starting with obj_foo, add starting_after=obj_foo in your subsequent request to retrieve the next page of the list.",
            "required": false,
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all refunds or a list of the refunds matching any provided filters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refund"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/refunds/{refundId}": {
      "get": {
        "tags": [
          "REFUNDS"
        ],
        "operationId": "GetRefund",
        "summary": "Get a refund",
        "x-clover-handler": "com.clover.scl.handlers.refunds.GetRefundHandler",
        "x-clover-is-public": true,
        "description": "Returns details of a specific refund",
        "parameters": [
          {
            "in": "path",
            "name": "refundId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "UUID of the refund to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the refund details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refund"
                },
                "examples": {
                  "refundExample": {
                    "description": "Refund example",
                    "value": {
                      "id": "re_1039VV2eZvKYlo2CadhQUrEZ,",
                      "object": "refund,",
                      "amount": "100,",
                      "charge": "ch_1036sv2eZvKYlo2CnBcJSUV8,",
                      "created": "1387481419000,",
                      "currency": "usd,",
                      "reason": "null,",
                      "receipt_number": "null,",
                      "status": "succeeded"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders": {
      "get": {
        "tags": [
          "ORDERS"
        ],
        "summary": "Get orders",
        "description": "Returns a list of the merchant's orders. The newest order is first in the list.",
        "operationId": "GetOrders",
        "x-clover-handler": "com.clover.scl.handlers.orders.ListOrdersHandler",
        "x-clover-is-public": true,
        "parameters": [
          {
            "description": "Order creation date",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "description": "Filters the results based on an open- or closed-ended date-time range. Each filter part requires the parameter name, such as `created` or `status_transitions`, a comparison operator (`gt`, `gte`, `lt`, or `lte`), and a [`date-time`](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) or Unix timestamp (in milliseconds). The query string uses one of the following formats: `{parameterName}.{comparisonOperator}=YYYY-MM-DDThhmmss` or `{parameterName}.{comparisonOperator}={timestamp}`. For example, to filter the results for objects created after January 12, 2021 but before January 15 at 3 PM, add the following to the request: `created.gt=2021-01-12&created.lte=2021-01-15T150000`.",
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is greater than the current value"
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is greater than or equal to the current value"
                    },
                    "lt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is less than the current value"
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Retrieve results where the created field is less than or equal to the current value"
                    }
                  }
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Returns orders for a specific customer",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Cursor used in pagination. The ending_before object ID sets your place in the list. For example, if you receive 100 objects in a list starting with obj_bar, add ending_before=obj_bar in your subsequent request to retrieve the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specify fields in the response for expansion",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Returns order details for one or more order UUIDs",
            "explode": true,
            "in": "query",
            "name": "ids",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The number of objects returned by the request, ranging between `1` and `100`. The default value is `10`.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Cursor used in pagination. The starting_after object ID sets your place in the list. For example, if you receive 100 objects in a list starting with obj_foo, add starting_after=obj_foo in your subsequent request to retrieve the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Returns orders based on status (`created`, `paid`, `fulfilled`, or `refunded`)",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter orders based on the time of a status change (paid, fulfilled, canceled, or returned)",
            "explode": true,
            "in": "query",
            "name": "status_transitions",
            "required": false,
            "schema": {
              "properties": {
                "canceled": {
                  "anyOf": [
                    {
                      "properties": {
                        "gt": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "gte": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lt": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lte": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "title": "range_query_specs",
                      "type": "object"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                "fulfilled": {
                  "anyOf": [
                    {
                      "properties": {
                        "gt": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "gte": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lt": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lte": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "title": "range_query_specs",
                      "type": "object"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                "paid": {
                  "anyOf": [
                    {
                      "properties": {
                        "gt": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "gte": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lt": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lte": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "title": "range_query_specs",
                      "type": "object"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                "returned": {
                  "anyOf": [
                    {
                      "properties": {
                        "gt": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "gte": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lt": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lte": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "title": "range_query_specs",
                      "type": "object"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                }
              },
              "title": "order_timestamp_specs",
              "type": "object"
            },
            "style": "deepObject"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/order"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "Set to `true` if there is another page of list items after the current page",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "Object type, set to list. Objects with the same type have the same value.",
                      "enum": [
                        "list"
                      ],
                      "type": "string"
                    },
                    "url": {
                      "description": "URL of the list",
                      "maxLength": 5000,
                      "pattern": "^/v1/orders",
                      "type": "string"
                    }
                  },
                  "required": [
                    "data",
                    "has_more",
                    "object",
                    "url"
                  ],
                  "type": "object",
                  "x-expandableFields": [
                    "data"
                  ]
                }
              }
            },
            "description": "Successful response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error response"
          }
        }
      },
      "post": {
        "tags": [
          "ORDERS"
        ],
        "summary": "Create an order",
        "description": "Create a new order object",
        "operationId": "PostOrders",
        "x-clover-handler": "com.clover.scl.handlers.orders.CreateOrderHandler",
        "x-clover-is-public": true,
        "requestBody": {
          "content": {
            "application/json": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject",
                  "contentType": "application/json"
                },
                "items": {
                  "explode": true,
                  "style": "deepObject",
                  "contentType": "application/json"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject",
                  "contentType": "application/json"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject",
                  "contentType": "application/json"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "currency": {
                    "description": "Three-letter ISO 4217 currency code (in lowercase)",
                    "type": "string"
                  },
                  "customer": {
                    "description": "UUID of an existing customer placing the order. If the customer account has email and shipping information, it will be automatically used for the order. Any email or shipping values provided with the request will override the values from the customer object.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "email": {
                    "description": "Email address of the customer placing the order",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specify fields in the response for expansion",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "items": {
                    "description": "List of items in the order. An order can have 25 items.",
                    "items": {
                      "properties": {
                        "amount": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "currency": {
                          "type": "string"
                        },
                        "description": {
                          "maxLength": 1000,
                          "type": "string"
                        },
                        "inventory_id": {
                          "description": "UUID of the associated object for the line item. The value is expandable if it is not null.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "parent": {
                          "deprecated": true,
                          "description": "DEPRECATED. Use `inventory_id` instead of `parent`.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "tax_rates": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "title": "Tax as percentage",
                                "description": "A tax rate object defining an item-level tax as a percentage",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "maxLength": 5000,
                                    "description": "The label for the tax rate"
                                  },
                                  "rate": {
                                    "type": "integer",
                                    "description": "Item-specific tax where a 10% rate is defined as `1000000`"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "title": "Tax as amount",
                                "description": "A tax rate object defining a flat item-level tax amount",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "maxLength": 5000,
                                    "description": "The label for the tax rate"
                                  },
                                  "tax_amount": {
                                    "type": "integer",
                                    "description": "Merchant-defined flat tax amount in cents"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "title": "Tax as UUID",
                                "description": "A tax rate object defining an item-level tax as UUID",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "maxLength": 5000,
                                    "description": "The label for the item-level tax UUID"
                                  },
                                  "tax_rate_uuid": {
                                    "type": "string",
                                    "description": "Item-level tax UUID"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": {
                          "enum": [
                            "shipping",
                            "sku"
                          ],
                          "maxLength": 5000,
                          "type": "string"
                        }
                      },
                      "title": "order_item_specs",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs (limited to 500 characters) that you can attach to the object. This parameter is useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "shipping": {
                    "description": "Shipping address for the order. If any SKU in the order has a `shippable` value of `true`, this parameter is required.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": [
                          "line1"
                        ],
                        "title": "address",
                        "type": "object"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": [
                      "address",
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "currency"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            },
            "description": "The order was successfully created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error response"
          }
        }
      }
    },
    "/v1/orders/{orderId}": {
      "get": {
        "tags": [
          "ORDERS"
        ],
        "summary": "Get an order",
        "description": "Returns the details of an existing order",
        "operationId": "GetOrdersId",
        "x-clover-handler": "com.clover.scl.handlers.orders.GetOrderHandler",
        "x-clover-is-public": true,
        "parameters": [
          {
            "description": "Specify fields in the response for expansion",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "UUID of the order",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            },
            "description": "The order is successfully retrieved"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error response"
          }
        }
      }
    },
    "/v1/orders/{orderId}/pay": {
      "post": {
        "tags": [
          "ORDERS"
        ],
        "summary": "Pay for an order",
        "description": "Pay for a specifc order with a `source`",
        "operationId": "PostOrdersIdPay",
        "x-clover-handler": "com.clover.scl.handlers.orders.PayForOrderHandler",
        "x-clover-is-public": true,
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject",
                  "contentType": "application/json"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject",
                  "contentType": "application/json"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "customer": {
                    "description": "UUID of the customer being charged for the order. If specified, this customer is charged instead of the customer associated with the order during order creation. Either a `source` or `customer` is required if no customer is associated with the order.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "ecomind": {
                    "type": "string",
                    "description": "Indicates whether the card data used for a charge was entered by the customer (`ecom`) or merchant (`moto`).",
                    "default": "ecom",
                    "enum": [
                      "ecom",
                      "moto"
                    ]
                  },
                  "email": {
                    "description": "Email address of the customer who placed the order (this is required if not provided while placing the order).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "amount": {
                    "description": "Charge amount in cents. If the charge request includes tax (`tax_rate_uuid` or `tax_amount`), this value must be the sum of any item prices and any tax or tip. For example, if the item cost = $10 and the tax is $1, the amount is 1100 cents ($11). Format: Cents",
                    "type": "integer",
                    "format": "int64"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Three-letter ISO 4217 currency code. Format: Lower case Length: Max 3"
                  },
                  "partial_redemption": {
                    "type": "boolean",
                    "description": "Indicates if the charge can be authorized for lesser amount. \n Values:\n True\n False - Default"
                  },
                  "expand": {
                    "description": "Specify fields in the response for expansion",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "level2": {
                    "description": "Additional data for purchase card transactions (US only).",
                    "properties": {
                      "tax_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Part of the transaction amount that indicates the sales tax. A pc_order_number is required when including a `tax_amount`."
                      },
                      "tax_indicator": {
                        "type": "integer",
                        "description": "Taxable status of the transaction. Values: 0 – No tax information provided 1 – Tax amount is provided 2 – Purchase item is tax exempt or non-taxable",
                        "enum": [
                          0,
                          1,
                          2
                        ]
                      },
                      "purchase_identifier": {
                        "type": "string",
                        "description": "Identifier, such as stock keeping unit (SKU), code or reference number that the merchant or customer uses to identify the purchase."
                      },
                      "pc_order_number": {
                        "type": "string",
                        "description": "Order number or customer reference number reported as part of the purchase card data."
                      },
                      "discount_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Discount amount for the transaction. Format: Cents"
                      },
                      "freight_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Freight amount included for the transaction. Format: Cents"
                      },
                      "duty_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Duty amount included for the transaction. Format: Cents"
                      },
                      "destination_postal_code": {
                        "type": "string",
                        "description": "Postal or ZIP code of the delivery location."
                      },
                      "ship_from_postal_code": {
                        "type": "string",
                        "description": "Postal or ZIP code of the shipping location."
                      },
                      "destination_country_code": {
                        "type": "integer",
                        "description": "Delivery location country code.\nFormat: 3-digit code; see the [Country code reference](https://docs.clover.com/docs/country-code-reference)."
                      },
                      "merchant_tax_id": {
                        "type": "string",
                        "description": "Only for Mastercard. Identifier (ID) for the tax collected by the merchant for the transaction."
                      },
                      "product_description": {
                        "type": "string",
                        "description": "Description of the purchased item."
                      }
                    }
                  },
                  "external_reference_id": {
                    "type": "string",
                    "description": "Identifier (ID), such as an invoice or purchase order (PO) number, that is passed to the merchant's gateway and displays in settlement records.\n Format: Supported for US—alphanumeric characters with in-between spaces\n Length: Max 12, including spaces and alphanumeric characters."
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs (limited to 500 characters) that you can attach to the object. This parameter is useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "source": {
                    "description": "A token or a `source`'s ID. Either a `source` or `customer` is required if no customer is associated with the order. Otherwise, the specified source will be charged instead of the customer attached to the order. It can also be alternate_tender.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "stored_credentials": {
                    "description": "Stored credentials for a transaction. For subsequent payments with a saved card, stored credentials are available only with multi-pay (mTokens) tokens. [See Saving a card for future transactions](https://docs.clover.com/docs/ecommerce-saving-card) for more information.",
                    "properties": {
                      "sequence": {
                        "enum": [
                          "FIRST",
                          "SUBSEQUENT"
                        ],
                        "type": "string",
                        "description": "Indicates sequence of the transaction for the same payment card.\n Values:\n First\n Subsequent - Mastercard only supports Subsequent"
                      },
                      "is_scheduled": {
                        "type": "boolean",
                        "description": "Indicates if the transaction is scheduled or part of an installment.\n Values:\n True - Transaction is scheduled.\n False - Transaction is part of an installment. Installments are only available in the US."
                      },
                      "initiator": {
                        "enum": [
                          "MERCHANT",
                          "CARDHOLDER"
                        ],
                        "type": "string",
                        "description": "Indicates with whose consent the transaction is initiated.\n Values:\n Cardholder\n Merchant"
                      },
                      "installment_info": {
                        "description": "Installment information for the transaction.",
                        "properties": {
                          "bill_pay_indicator": {
                            "enum": [
                              "Recurring",
                              "Installment"
                            ],
                            "type": "string",
                            "description": "Indicates if the transaction is a recurring or installment payment. \n Values:\n Installment\n Recurring - For Canadian merchants, the value must be Recurring."
                          },
                          "invoice_number": {
                            "type": "string",
                            "description": "Invoice number of the installment or recurring transaction."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the installment or recurring transaction."
                          }
                        }
                      }
                    }
                  },
                  "tip_amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "description": "Amount paid in tips. This value is automatically added to the total amount when the transaction is finalized."
                  },
                  "tender": {
                    "description": "Custom tender to charge or pay for the order, for example: cash or check.",
                    "properties": {
                      "label_key": {
                        "enum": [
                          "com.clover.tender.cash",
                          "com.clover.tender.check"
                        ],
                        "type": "string",
                        "description": "Cash and check system tenders."
                      },
                      "label": {
                        "type": "string",
                        "description": "Name of the custom merchant tender."
                      },
                      "id": {
                        "type": "string",
                        "description": "Universally unique identifier (UUID) of the custom merchant tender."
                      }
                    }
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            },
            "description": "The order's payment was successfully processed"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error response"
          }
        }
      }
    },
    "/scl/v1/orders/{orderId}/public_pay": {},
    "/v1/orders/{orderId}/returns": {
      "post": {
        "tags": [
          "ORDERS"
        ],
        "summary": "Return an order",
        "description": "Return all or a part of the order. An order must be `paid` or `fulfilled` for any part of the order to be returned.",
        "operationId": "PostOrdersIdReturns",
        "x-clover-handler": "com.clover.scl.handlers.orders.ReturnOrderHandler",
        "x-clover-is-public": true,
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject",
                  "contentType": "application/json"
                },
                "items": {
                  "explode": true,
                  "style": "deepObject",
                  "contentType": "application/json"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "items": {
                    "anyOf": [
                      {
                        "items": {
                          "properties": {
                            "amount": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "description": {
                              "maxLength": 1000,
                              "type": "string"
                            },
                            "inventory_id": {
                              "description": "UUID of the associated object for the line item. The value is expandable if it is not null.",
                              "maxLength": 5000,
                              "type": "string"
                            },
                            "parent": {
                              "deprecated": true,
                              "description": "DEPRECATED. Use `inventory_id` instead of `parent`.",
                              "maxLength": 5000,
                              "type": "string"
                            },
                            "quantity": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "type": {
                              "enum": [
                                "shipping",
                                "sku"
                              ],
                              "maxLength": 5000,
                              "type": "string"
                            }
                          },
                          "title": "return_order_item_specs",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [
                          ""
                        ],
                        "type": "string"
                      }
                    ],
                    "description": "List of items to return"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order_return"
                }
              }
            },
            "description": "The return is successfully processed"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error response"
          }
        }
      }
    },
    "/v1/charges/{chargeId}/capture": {
      "post": {
        "tags": [
          "CHARGES"
        ],
        "summary": "Capture a charge",
        "description": "As step two of the two-part payment flow, captures the payment of an existing but uncaptured charge. An uncaptured charge is first created by setting the `capture` value to `false`.",
        "operationId": "CaptureCharge",
        "x-clover-handler": "com.clover.scl.handlers.charges.CaptureChargeHandler",
        "x-clover-is-public": true,
        "parameters": [
          {
            "in": "path",
            "name": "chargeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "UUID of the charge to be captured"
          }
        ],
        "requestBody": {
          "description": "Used to capture the full or partial amount of the specified charge",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 1,
                    "description": "Charge amount in the smallest monetary unit of the merchant's currency. If you do not specify an amount, the total of the original charge is captured."
                  },
                  "receipt_email": {
                    "type": "string",
                    "description": "Email address which receives the charge receipt. This value overrides any previously-specified email address for the charge. Receipts are not sent in sandbox."
                  },
                  "level2": {
                    "description": "Additional data for purchase card transactions (US only).",
                    "properties": {
                      "tax_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Part of the transaction amount that indicates the sales tax. A pc_order_number is required when including a `tax_amount`."
                      },
                      "tax_indicator": {
                        "type": "integer",
                        "description": "Taxable status of the transaction. Values: 0 – No tax information provided 1 – Tax amount is provided 2 – Purchase item is tax exempt or non-taxable",
                        "enum": [
                          0,
                          1,
                          2
                        ]
                      },
                      "purchase_identifier": {
                        "type": "string",
                        "description": "Identifier, such as stock keeping unit (SKU), code or reference number that the merchant or customer uses to identify the purchase."
                      },
                      "pc_order_number": {
                        "type": "string",
                        "description": "Order number or customer reference number reported as part of the purchase card data."
                      },
                      "discount_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Discount amount for the transaction. Format: Cents"
                      },
                      "freight_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Freight amount included for the transaction. Format: Cents"
                      },
                      "duty_amount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Duty amount included for the transaction. Format: Cents"
                      },
                      "destination_postal_code": {
                        "type": "string",
                        "description": "Postal or ZIP code of the delivery location."
                      },
                      "ship_from_postal_code": {
                        "type": "string",
                        "description": "Postal or ZIP code of the shipping location."
                      },
                      "destination_country_code": {
                        "type": "integer",
                        "description": "Delivery location country code.\nFormat: 3-digit code; see the [Country code reference](https://docs.clover.com/docs/country-code-reference)."
                      },
                      "merchant_tax_id": {
                        "type": "string",
                        "description": "Only for Mastercard. Identifier (ID) for the tax collected by the merchant for the transaction."
                      },
                      "product_description": {
                        "type": "string",
                        "description": "Description of the purchased item."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the charge object with the captured value set to true. This method returns an error if the charge is already set to `refunded`, `expired`, or `captured`, or if an invalid capture amount is specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/charge"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error response from the API",
                  "properties": {
                    "error": {
                      "properties": {
                        "charge": {
                          "description": "Returned when a card-related error occurs. Unique identifier of the failed charge.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "code": {
                          "description": "Additional information about the error that users can use to identify the issue.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "decline_code": {
                          "description": "Returns when a card issuer declines the transaction. This includes the reason for the decline if specified by the card issuer.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "doc_url": {
                          "description": "URL for more information about the reported error code.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "message": {
                          "description": "Detailed information about the error code. For card-related errors, this information can be used to identify the issue for users.",
                          "maxLength": 40000,
                          "type": "string"
                        },
                        "param": {
                          "description": "If the error is related to a specific parameter, this value lists the parameter. This can inform users entering card information of a specific problem with their entry.",
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": {
                          "description": "Returned error type.",
                          "enum": [
                            "api_connection_error",
                            "api_error",
                            "authentication_error",
                            "card_error",
                            "idempotency_error",
                            "invalid_request_error",
                            "rate_limit_error"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "title": "APIErrors",
                      "type": "object",
                      "x-expandableFields": [
                        "payment_intent",
                        "payment_method",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/scl/v1/merchant/{merchantId}/charge": {}
  },
  "x-readme": {
    "proxy-enabled": false
  }
}